{"ast":null,"code":"import _slicedToArray from\"/Users/mac/Desktop/esgrown/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import axios from'axios';import{Spinner,Accordion,Button,Card}from'react-bootstrap';var ExercisesLog=function ExercisesLog(_ref){var ex=_ref.ex,spinner=_ref.spinner,title=_ref.title;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),ques=_useState2[0],setQues=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),quesSpinner=_useState4[0],setQuesSpinner=_useState4[1];var getQuestions=function getQuestions(e){var id=e.target.id;setQuesSpinner(true);axios.get(\"http://localhost:5000/question/\".concat(id)).then(function(res){setQues(res.data);setQuesSpinner(false);}).catch(function(err){return console.log(err);});};return React.createElement(React.Fragment,null,React.createElement(Card,{style:{padding:'5px',height:'800px',overflow:'scroll',marginRight:'20px'},className:\"col col-lg-5 col-sm-6\"},React.createElement(\"h6\",{style:{textAlign:'center'}},title),spinner?React.createElement(Spinner,{animation:\"grow\"}):React.createElement(Accordion,{defaultActiveKey:\"0\"},ex.map(function(data){return React.createElement(Card,null,React.createElement(Card.Header,null,React.createElement(Accordion.Toggle,{as:Button,onClick:getQuestions,variant:\"link\",id:data._id,eventKey:data._id},data.title,React.createElement(\"br\",null),React.createElement(\"small\",{style:{fontSize:'13px'}},\"Duration: \",data.duration,\" Min\"))),React.createElement(Accordion.Collapse,{eventKey:data._id},React.createElement(Card.Body,null,React.createElement(\"span\",{style:{color:'#97BA10',fontStyle:'italic'}},\"Number of Questions: \",ques.length),React.createElement(\"hr\",null),quesSpinner?React.createElement(Spinner,{size:\"sm\",animation:\"grow\"}):ques.map(function(q){return React.createElement(React.Fragment,null,React.createElement(\"p\",{style:{color:'#E8943F'}},q.question),React.createElement(\"span\",{style:{color:'#E8943F',fontStyle:'italic'}},React.createElement(\"u\",null,\"Options\")),React.createElement(\"ul\",null,q.options.map(function(op){return React.createElement(\"li\",null,op);})),React.createElement(\"span\",{style:{color:'#97BA10'}},\"correct answer: \"+q.correct_ans),React.createElement(\"br\",null),React.createElement(\"span\",{style:{color:'#97BA10'}},q.score+\" marks\"),React.createElement(\"hr\",null));}))));}))));};export default ExercisesLog;","map":{"version":3,"sources":["/Users/mac/Desktop/esgrown/src/components/admin/exercises/components/exercise_log.js"],"names":["React","useState","useEffect","axios","Spinner","Accordion","Button","Card","ExercisesLog","ex","spinner","title","ques","setQues","quesSpinner","setQuesSpinner","getQuestions","e","id","target","get","then","res","data","catch","err","console","log","padding","height","overflow","marginRight","textAlign","map","_id","fontSize","duration","color","fontStyle","length","q","question","options","op","correct_ans","score"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Spinner, Accordion, Button, Card } from 'react-bootstrap';\n\n\n\n\n\nconst ExercisesLog = ({ ex, spinner, title }) => {\n\n    const [ques, setQues] = useState([]);\n    const [quesSpinner, setQuesSpinner] = useState(false)\n    \n\n    const getQuestions = (e) => {\n\n        const id = e.target.id;\n        setQuesSpinner(true)\n\n        axios.get(`http://localhost:5000/question/${id}`)\n            .then(res => {\n                setQues(res.data)\n                setQuesSpinner(false)\n\n            })\n            .catch(err => console.log(err))\n    }\n\n\n\n    return (\n        <>\n            <Card style={{ padding: '5px', height: '800px', overflow: 'scroll', marginRight: '20px' }} className=\"col col-lg-5 col-sm-6\">\n                <h6 style={{ textAlign: 'center' }}>{title}</h6>\n                {spinner ? <Spinner animation=\"grow\" /> :\n                    <Accordion defaultActiveKey=\"0\">\n                        {ex.map(data => {\n                            return (\n                                <Card>\n                                    <Card.Header>\n                                        <Accordion.Toggle as={Button} onClick={getQuestions} variant=\"link\" id={data._id} eventKey={data._id}>\n                                            {data.title}<br /><small style={{ fontSize: '13px' }}>Duration: {data.duration} Min</small>\n                                        </Accordion.Toggle>\n                                    </Card.Header>\n                                    <Accordion.Collapse eventKey={data._id}>\n                                        <Card.Body>\n                                            <span style={{ color: '#97BA10', fontStyle:'italic' }}>Number of Questions: {ques.length}</span>\n                                            <hr />\n                                            {quesSpinner ? <Spinner size=\"sm\" animation=\"grow\" />\n                                                :\n                                                ques.map(q => {\n                                                    return (\n                                                        <>\n                                                            <p style={{ color: '#E8943F' }}>{q.question}</p>\n\n                                                            <span style={{ color: '#E8943F', fontStyle: 'italic' }}><u>Options</u></span>\n\n                                                            <ul>\n                                                                {q.options.map(op => {\n                                                                    return (\n                                                                        <li>{op}</li>\n                                                                    );\n                                                                })}\n                                                            </ul>\n                                                            <span style={{ color: '#97BA10'}}>{\"correct answer: \" + q.correct_ans}</span>\n                                                            <br />\n                                                            <span style={{ color: '#97BA10' }}>{q.score + \" marks\"}</span>\n                                                            <hr />\n                                                        </>\n                                                    );\n                                                })\n                                            }\n\n                                        </Card.Body>\n\n                                    </Accordion.Collapse>\n                                </Card>\n                            )\n                        })}\n                    </Accordion>}\n            </Card>\n        </>\n    );\n}\n\nexport default ExercisesLog;"]},"metadata":{},"sourceType":"module"}