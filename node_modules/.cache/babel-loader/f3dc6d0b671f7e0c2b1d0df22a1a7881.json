{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/projekte/esgrown/src/components/ind_dashboard_components/exercises/rmquestioncomponent.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { Spinner } from 'react-bootstrap';\nimport Quiz from './quiz';\nimport SubmitBtn from './submitbtn';\nimport StartBtn from './startbtn';\nimport { toast } from 'react-toastify';\nlet userAnswer = [];\n\nclass QuestionsComponent extends Component {\n  //userAnswer = [];\n  constructor(props) {\n    super(props);\n\n    this.setStart = () => {\n      this.setState({\n        page: 2\n      }); // this.startTimer()\n    };\n\n    this.setPage = () => {\n      this.setState({\n        page: 3\n      });\n    };\n\n    this.maxScore = question => {\n      const getMaxScore = question.reduce((a, b) => {\n        return a + b.score;\n      }, 0);\n      this.setState({\n        max_score: getMaxScore\n      });\n    };\n\n    this.handelUserAns = e => {\n      //check if user ans is correct ie user ans should be equal to question correct ans. if correct user score is equal to quetion.score else 0. add user score to the posted object\n      if (e.target.type == 'radio') {\n        const q = e.target.parentNode.parentNode.parentNode.firstChild.value.toLowerCase();\n        const a = e.target.value.toLowerCase();\n        const score = parseInt(e.target.getAttribute('data-score'));\n        const correctAns = e.target.getAttribute('data-ans').toLowerCase();\n        let userScore;\n\n        if (a === correctAns) {\n          userScore = score;\n        } else {\n          userScore = parseInt(0);\n        }\n\n        if (userAnswer.length > 0) {\n          //prevent submission of the same question with different answers\n          const fnd = userAnswer.find(x => x.question == q);\n\n          if (!fnd) {\n            userAnswer.push({\n              question: q,\n              ans: a,\n              userScore\n            });\n          } else {\n            userAnswer.splice(userAnswer.findIndex(item => item.question === q), 1);\n            userAnswer.push({\n              question: q,\n              ans: a,\n              userScore\n            });\n          }\n        } else {\n          userAnswer.push({\n            question: q,\n            ans: a,\n            userScore\n          });\n        }\n      } else {}\n\n      this.setState({\n        userAns: userAnswer\n      });\n    };\n\n    this.submitAns = () => {\n      //attache corp id along with ans\n      const userData = JSON.parse(sessionStorage.getItem('key'));\n      const name = userData.name,\n            email = userData.email;\n      const _this$props$exercise = this.props.exercise,\n            _id = _this$props$exercise._id,\n            service = _this$props$exercise.service,\n            corp_id = _this$props$exercise.corp_id,\n            job_id = _this$props$exercise.job_id,\n            duration = _this$props$exercise.duration; //get user total score\n\n      const total = this.state.userAns.reduce((a, b) => {\n        return a + b.userScore;\n      }, 0);\n      const data = {\n        user_id: userData.id,\n        corp_id: corp_id,\n        excercise_id: _id,\n        job_id: this.props.exercise.job_id,\n        service: service,\n        name: name,\n        email: email,\n        total_scored: total,\n        answers: this.state.userAns,\n        max_score: this.state.max_score\n      }; // send to db\n\n      try {\n        this.setState({\n          submitting: true\n        });\n        axios.post(`http://localhost:5000/answer/add`, data).then(res => {\n          this.setState({\n            submitting: false\n          });\n          this.setState({\n            showScoreModal: true\n          });\n        }).catch(err => console.log(err)); //\n      } catch (error) {}\n\n      this.setState({\n        page: 0\n      });\n    };\n\n    this.state = {\n      currentCount: this.props.duration,\n      activeStep: 0,\n      userAns: [],\n      page: 1,\n      spinner: true,\n      disabled: false,\n      exTaken: false,\n      userName: '',\n      submitting: false,\n      showScoreModal: false,\n      max_score: 0\n    };\n  } // timer() {\n  //     this.setState({\n  //         currentCount: this.state.currentCount - 1\n  //     })\n  //     if (this.state.currentCount < 1) {\n  //         clearInterval(this.intervalId);\n  //         this.setState({ page: 3 })\n  //     }\n  // }\n  // startTimer() {\n  //     this.setState({ currentCount: this.props.duration * 60 });\n  //     setInterval(this.timer.bind(this), 1000);\n  // }\n  //check if user has taken this exercise b4\n\n\n  checkIfUserHasTakenEx(user, exid) {\n    axios.post(`http://localhost:5000/answer/check`, {\n      user_id: user,\n      ex_id: exid\n    }).then(res => {\n      if (res.data.length > 0) {\n        this.setState({\n          exTaken: true\n        });\n        toast('Our records show you have taken this exercise in the past', 'warn');\n      }\n    }).catch(err => console.log(err));\n  }\n\n  componentDidMount() {\n    const user = JSON.parse(sessionStorage.getItem('key'));\n    this.setState({\n      userName: user.name\n    }); // this.intervalId = setInterval(this.timer.bind(this), 1000);\n\n    axios.get(`http://localhost:5000/question/${this.props.exercise._id}`).then(res => {\n      console.log(res.data);\n\n      if (res.data.length > 0) {\n        this.setState({\n          question: res.data,\n          spinner: false\n        });\n      }\n\n      if (res.data.length === 0) {\n        this.setState({\n          disabled: true\n        });\n        toast('sorry, no exercise yet!', 'info');\n      }\n    }).catch(err => console.log(err));\n\n    if (this.state.spinner == false) {\n      this.setState({\n        page: 1\n      });\n    }\n\n    this.checkIfUserHasTakenEx(user.id, this.props.exercise._id);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalId);\n  }\n\n  render() {\n    const _this$state = this.state,\n          question = _this$state.question,\n          spinner = _this$state.spinner;\n    const duration = this.props.exercise.duration;\n    console.log(this.state.max_score);\n    return React.createElement(React.Fragment, null, this.state.page == 1 ? React.createElement(StartBtn, {\n      setStart: this.setStart,\n      duration: this.props.duration,\n      disabled: this.state.disabled,\n      exTaken: this.state.exTaken,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }) : this.state.page == 2 ? React.createElement(Quiz, {\n      question: question,\n      submitAns: this.submitAns,\n      handelUserAns: this.handelUserAns,\n      duration: duration,\n      setPage: this.setPage,\n      maxScore: this.maxScore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }) : this.state.page == 3 ? React.createElement(SubmitBtn, {\n      submitAns: this.submitAns,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }) : this.state.page == 0 ? \"\" : \"\");\n  }\n\n}\n\nexport default QuestionsComponent;","map":{"version":3,"sources":["/Users/mac/Desktop/projekte/esgrown/src/components/ind_dashboard_components/exercises/rmquestioncomponent.js"],"names":["React","Component","axios","Spinner","Quiz","SubmitBtn","StartBtn","toast","userAnswer","QuestionsComponent","constructor","props","setStart","setState","page","setPage","maxScore","question","getMaxScore","reduce","a","b","score","max_score","handelUserAns","e","target","type","q","parentNode","firstChild","value","toLowerCase","parseInt","getAttribute","correctAns","userScore","length","fnd","find","x","push","ans","splice","findIndex","item","userAns","submitAns","userData","JSON","parse","sessionStorage","getItem","name","email","exercise","_id","service","corp_id","job_id","duration","total","state","data","user_id","id","excercise_id","total_scored","answers","submitting","post","then","res","showScoreModal","catch","err","console","log","error","currentCount","activeStep","spinner","disabled","exTaken","userName","checkIfUserHasTakenEx","user","exid","ex_id","componentDidMount","get","componentWillUnmount","clearInterval","intervalId","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAIA,IAAIC,UAAU,GAAG,EAAjB;;AAGA,MAAMC,kBAAN,SAAiCR,SAAjC,CAA2C;AACvC;AACAS,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAEf,UAAMA,KAAN;;AAFe,SAsFnBC,QAtFmB,GAsFR,MAAM;AACb,WAAKC,QAAL,CAAc;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAd,EADa,CAEb;AACH,KAzFkB;;AAAA,SA2FnBC,OA3FmB,GA2FT,MAAM;AACZ,WAAKF,QAAL,CAAc;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAd;AACH,KA7FkB;;AAAA,SA+FnBE,QA/FmB,GA+FPC,QAAD,IAAc;AACrB,YAAMC,WAAW,GAAGD,QAAQ,CAACE,MAAT,CAAgB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC1C,eAAOD,CAAC,GAAGC,CAAC,CAACC,KAAb;AACH,OAFmB,EAEjB,CAFiB,CAApB;AAGA,WAAKT,QAAL,CAAc;AAAEU,QAAAA,SAAS,EAAEL;AAAb,OAAd;AACH,KApGkB;;AAAA,SAsGnBM,aAtGmB,GAsGFC,CAAD,IAAO;AACnB;AACA,UAAIA,CAAC,CAACC,MAAF,CAASC,IAAT,IAAiB,OAArB,EAA8B;AAC1B,cAAMC,CAAC,GAAGH,CAAC,CAACC,MAAF,CAASG,UAAT,CAAoBA,UAApB,CAA+BA,UAA/B,CAA0CC,UAA1C,CAAqDC,KAArD,CAA2DC,WAA3D,EAAV;AACA,cAAMZ,CAAC,GAAGK,CAAC,CAACC,MAAF,CAASK,KAAT,CAAeC,WAAf,EAAV;AACA,cAAMV,KAAK,GAAGW,QAAQ,CAACR,CAAC,CAACC,MAAF,CAASQ,YAAT,CAAsB,YAAtB,CAAD,CAAtB;AACA,cAAMC,UAAU,GAAGV,CAAC,CAACC,MAAF,CAASQ,YAAT,CAAsB,UAAtB,EAAkCF,WAAlC,EAAnB;AACA,YAAII,SAAJ;;AAEA,YAAIhB,CAAC,KAAKe,UAAV,EAAsB;AAClBC,UAAAA,SAAS,GAAGd,KAAZ;AACH,SAFD,MAEO;AACHc,UAAAA,SAAS,GAAGH,QAAQ,CAAC,CAAD,CAApB;AACH;;AAID,YAAIzB,UAAU,CAAC6B,MAAX,GAAoB,CAAxB,EAA2B;AACvB;AACA,gBAAMC,GAAG,GAAG9B,UAAU,CAAC+B,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACvB,QAAF,IAAcW,CAAnC,CAAZ;;AACA,cAAI,CAACU,GAAL,EAAU;AACN9B,YAAAA,UAAU,CAACiC,IAAX,CAAgB;AACZxB,cAAAA,QAAQ,EAAEW,CADE;AAEZc,cAAAA,GAAG,EAAEtB,CAFO;AAGZgB,cAAAA;AAHY,aAAhB;AAKH,WAND,MAMO;AACH5B,YAAAA,UAAU,CAACmC,MAAX,CAAkBnC,UAAU,CAACoC,SAAX,CAAqBC,IAAI,IAAIA,IAAI,CAAC5B,QAAL,KAAkBW,CAA/C,CAAlB,EAAqE,CAArE;AAEApB,YAAAA,UAAU,CAACiC,IAAX,CACI;AACIxB,cAAAA,QAAQ,EAAEW,CADd;AAEIc,cAAAA,GAAG,EAAEtB,CAFT;AAGIgB,cAAAA;AAHJ,aADJ;AAOH;AACJ,SApBD,MAoBO;AACH5B,UAAAA,UAAU,CAACiC,IAAX,CAAgB;AACZxB,YAAAA,QAAQ,EAAEW,CADE;AAEZc,YAAAA,GAAG,EAAEtB,CAFO;AAGZgB,YAAAA;AAHY,WAAhB;AAOH;AACJ,OA5CD,MA4CO,CAEN;;AAED,WAAKvB,QAAL,CAAc;AAAEiC,QAAAA,OAAO,EAAEtC;AAAX,OAAd;AAEH,KA1JkB;;AAAA,SA+JnBuC,SA/JmB,GA+JP,MAAM;AACd;AACA,YAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWC,cAAc,CAACC,OAAf,CAAuB,KAAvB,CAAX,CAAjB;AAFc,YAGNC,IAHM,GAGUL,QAHV,CAGNK,IAHM;AAAA,YAGAC,KAHA,GAGUN,QAHV,CAGAM,KAHA;AAAA,mCAKsC,KAAK3C,KAAL,CAAW4C,QALjD;AAAA,YAKNC,GALM,wBAKNA,GALM;AAAA,YAKDC,OALC,wBAKDA,OALC;AAAA,YAKQC,OALR,wBAKQA,OALR;AAAA,YAKiBC,MALjB,wBAKiBA,MALjB;AAAA,YAKyBC,QALzB,wBAKyBA,QALzB,EAQd;;AACA,YAAMC,KAAK,GAAG,KAAKC,KAAL,CAAWhB,OAAX,CAAmB3B,MAAnB,CAA0B,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC9C,eAAOD,CAAC,GAAGC,CAAC,CAACe,SAAb;AACH,OAFa,EAEX,CAFW,CAAd;AAKA,YAAM2B,IAAI,GAAG;AACTC,QAAAA,OAAO,EAAEhB,QAAQ,CAACiB,EADT;AAETP,QAAAA,OAAO,EAAEA,OAFA;AAGTQ,QAAAA,YAAY,EAAEV,GAHL;AAITG,QAAAA,MAAM,EAAE,KAAKhD,KAAL,CAAW4C,QAAX,CAAoBI,MAJnB;AAKTF,QAAAA,OAAO,EAAEA,OALA;AAMTJ,QAAAA,IAAI,EAAEA,IANG;AAOTC,QAAAA,KAAK,EAAEA,KAPE;AAQTa,QAAAA,YAAY,EAAEN,KARL;AASTO,QAAAA,OAAO,EAAE,KAAKN,KAAL,CAAWhB,OATX;AAUTvB,QAAAA,SAAS,EAAE,KAAKuC,KAAL,CAAWvC;AAVb,OAAb,CAdc,CA4Bd;;AACA,UAAI;AACA,aAAKV,QAAL,CAAc;AAACwD,UAAAA,UAAU,EAAE;AAAb,SAAd;AACAnE,QAAAA,KAAK,CAACoE,IAAN,CAAY,kCAAZ,EAA+CP,IAA/C,EACKQ,IADL,CACUC,GAAG,IAAI;AACT,eAAK3D,QAAL,CAAc;AAAEwD,YAAAA,UAAU,EAAE;AAAd,WAAd;AACA,eAAKxD,QAAL,CAAc;AAAE4D,YAAAA,cAAc,EAAE;AAAlB,WAAd;AAEH,SALL,EAMKC,KANL,CAMWC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CANlB,EAFA,CASA;AAEH,OAXD,CAWE,OAAOG,KAAP,EAAc,CAEf;;AAGD,WAAKjE,QAAL,CAAc;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAd;AAEH,KA9MkB;;AAIf,SAAKgD,KAAL,GAAa;AACTiB,MAAAA,YAAY,EAAE,KAAKpE,KAAL,CAAWiD,QADhB;AAEToB,MAAAA,UAAU,EAAE,CAFH;AAGTlC,MAAAA,OAAO,EAAE,EAHA;AAIThC,MAAAA,IAAI,EAAE,CAJG;AAKTmE,MAAAA,OAAO,EAAE,IALA;AAMTC,MAAAA,QAAQ,EAAE,KAND;AAOTC,MAAAA,OAAO,EAAE,KAPA;AAQTC,MAAAA,QAAQ,EAAE,EARD;AASTf,MAAAA,UAAU,EAAE,KATH;AAUTI,MAAAA,cAAc,EAAE,KAVP;AAWTlD,MAAAA,SAAS,EAAE;AAXF,KAAb;AAeH,GArBsC,CAyBvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;;;AACA8D,EAAAA,qBAAqB,CAACC,IAAD,EAAOC,IAAP,EAAa;AAC9BrF,IAAAA,KAAK,CAACoE,IAAN,CAAY,oCAAZ,EAAiD;AAC7CN,MAAAA,OAAO,EAAEsB,IADoC;AAE7CE,MAAAA,KAAK,EAAED;AAFsC,KAAjD,EAGGhB,IAHH,CAGQC,GAAG,IAAI;AACX,UAAIA,GAAG,CAACT,IAAJ,CAAS1B,MAAT,GAAkB,CAAtB,EAAyB;AACrB,aAAKxB,QAAL,CAAc;AAAEsE,UAAAA,OAAO,EAAE;AAAX,SAAd;AACA5E,QAAAA,KAAK,CAAC,2DAAD,EAA8D,MAA9D,CAAL;AACH;AACJ,KARD,EAQGmE,KARH,CAQSC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CARhB;AASH;;AAGDc,EAAAA,iBAAiB,GAAG;AAEhB,UAAMH,IAAI,GAAGrC,IAAI,CAACC,KAAL,CAAWC,cAAc,CAACC,OAAf,CAAuB,KAAvB,CAAX,CAAb;AACA,SAAKvC,QAAL,CAAc;AAAEuE,MAAAA,QAAQ,EAAEE,IAAI,CAACjC;AAAjB,KAAd,EAHgB,CAIhB;;AACAnD,IAAAA,KAAK,CAACwF,GAAN,CAAW,kCAAiC,KAAK/E,KAAL,CAAW4C,QAAX,CAAoBC,GAAI,EAApE,EACKe,IADL,CACUC,GAAG,IAAI;AACTI,MAAAA,OAAO,CAACC,GAAR,CAAYL,GAAG,CAACT,IAAhB;;AACA,UAAIS,GAAG,CAACT,IAAJ,CAAS1B,MAAT,GAAkB,CAAtB,EAAyB;AACrB,aAAKxB,QAAL,CAAc;AACVI,UAAAA,QAAQ,EAAEuD,GAAG,CAACT,IADJ;AAEVkB,UAAAA,OAAO,EAAE;AAFC,SAAd;AAIH;;AACD,UAAIT,GAAG,CAACT,IAAJ,CAAS1B,MAAT,KAAoB,CAAxB,EAA2B;AACvB,aAAKxB,QAAL,CAAc;AAAEqE,UAAAA,QAAQ,EAAE;AAAZ,SAAd;AACA3E,QAAAA,KAAK,CAAC,yBAAD,EAA4B,MAA5B,CAAL;AACH;AACJ,KAbL,EAcKmE,KAdL,CAcWC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAdlB;;AAgBA,QAAI,KAAKb,KAAL,CAAWmB,OAAX,IAAsB,KAA1B,EAAiC;AAC7B,WAAKpE,QAAL,CAAc;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAd;AACH;;AAED,SAAKuE,qBAAL,CAA2BC,IAAI,CAACrB,EAAhC,EAAoC,KAAKtD,KAAL,CAAW4C,QAAX,CAAoBC,GAAxD;AACH;;AAEDmC,EAAAA,oBAAoB,GAAG;AACnBC,IAAAA,aAAa,CAAC,KAAKC,UAAN,CAAb;AACH;;AA6HDC,EAAAA,MAAM,GAAG;AAAA,wBAEyB,KAAKhC,KAF9B;AAAA,UAEG7C,QAFH,eAEGA,QAFH;AAAA,UAEagE,OAFb,eAEaA,OAFb;AAAA,UAGGrB,QAHH,GAGgB,KAAKjD,KAAL,CAAW4C,QAH3B,CAGGK,QAHH;AAKLgB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKf,KAAL,CAAWvC,SAAvB;AAGA,WACI,0CAES,KAAKuC,KAAL,CAAWhD,IAAX,IAAmB,CAApB,GAAyB,oBAAC,QAAD;AAAU,MAAA,QAAQ,EAAE,KAAKF,QAAzB;AAAmC,MAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWiD,QAAxD;AAAkE,MAAA,QAAQ,EAAE,KAAKE,KAAL,CAAWoB,QAAvF;AAAiG,MAAA,OAAO,EAAE,KAAKpB,KAAL,CAAWqB,OAArH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAzB,GAA6J,KAAKrB,KAAL,CAAWhD,IAAX,IAAmB,CAApB,GAAyB,oBAAC,IAAD;AAAM,MAAA,QAAQ,EAAEG,QAAhB;AAA0B,MAAA,SAAS,EAAE,KAAK8B,SAA1C;AAAqD,MAAA,aAAa,EAAE,KAAKvB,aAAzE;AAAwF,MAAA,QAAQ,EAAEoC,QAAlG;AAA4G,MAAA,OAAO,EAAE,KAAK7C,OAA1H;AAAmI,MAAA,QAAQ,EAAE,KAAKC,QAAlJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAzB,GAA0L,KAAK8C,KAAL,CAAWhD,IAAX,IAAmB,CAApB,GAAyB,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAE,KAAKiC,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAzB,GAAqE,KAAKe,KAAL,CAAWhD,IAAX,IAAmB,CAApB,GAAyB,EAAzB,GAA8B,EAF/b,CADJ;AAQH;;AAlOsC;;AAqO3C,eAAeL,kBAAf","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Spinner } from 'react-bootstrap';\nimport Quiz from './quiz';\nimport SubmitBtn from './submitbtn';\nimport StartBtn from './startbtn';\nimport { toast } from 'react-toastify';\n\n\n\nlet userAnswer = [];\n\n\nclass QuestionsComponent extends Component {\n    //userAnswer = [];\n    constructor(props) {\n\n        super(props);\n\n        this.state = {\n            currentCount: this.props.duration,\n            activeStep: 0,\n            userAns: [],\n            page: 1,\n            spinner: true,\n            disabled: false,\n            exTaken: false,\n            userName: '',\n            submitting: false,\n            showScoreModal: false,\n            max_score: 0\n\n        }\n\n    }\n\n\n\n    // timer() {\n    //     this.setState({\n    //         currentCount: this.state.currentCount - 1\n    //     })\n    //     if (this.state.currentCount < 1) {\n    //         clearInterval(this.intervalId);\n    //         this.setState({ page: 3 })\n    //     }\n    // }\n\n    // startTimer() {\n    //     this.setState({ currentCount: this.props.duration * 60 });\n    //     setInterval(this.timer.bind(this), 1000);\n    // }\n\n\n    //check if user has taken this exercise b4\n    checkIfUserHasTakenEx(user, exid) {\n        axios.post(`http://localhost:5000/answer/check`, {\n            user_id: user,\n            ex_id: exid\n        }).then(res => {\n            if (res.data.length > 0) {\n                this.setState({ exTaken: true });\n                toast('Our records show you have taken this exercise in the past', 'warn')\n            }\n        }).catch(err => console.log(err))\n    }\n\n\n    componentDidMount() {\n\n        const user = JSON.parse(sessionStorage.getItem('key'));\n        this.setState({ userName: user.name })\n        // this.intervalId = setInterval(this.timer.bind(this), 1000);\n        axios.get(`http://localhost:5000/question/${this.props.exercise._id}`)\n            .then(res => {\n                console.log(res.data)\n                if (res.data.length > 0) {\n                    this.setState({\n                        question: res.data,\n                        spinner: false\n                    })\n                }\n                if (res.data.length === 0) {\n                    this.setState({ disabled: true });\n                    toast('sorry, no exercise yet!', 'info')\n                }\n            })\n            .catch(err => console.log(err));\n\n        if (this.state.spinner == false) {\n            this.setState({ page: 1 })\n        }\n\n        this.checkIfUserHasTakenEx(user.id, this.props.exercise._id)\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.intervalId);\n    }\n\n\n    setStart = () => {\n        this.setState({ page: 2 })\n        // this.startTimer()\n    }\n\n    setPage = () => {\n        this.setState({ page: 3 })\n    }\n\n    maxScore = (question) => {\n        const getMaxScore = question.reduce((a, b) => {\n            return a + b.score\n        }, 0)\n        this.setState({ max_score: getMaxScore })\n    }\n\n    handelUserAns = (e) => {\n        //check if user ans is correct ie user ans should be equal to question correct ans. if correct user score is equal to quetion.score else 0. add user score to the posted object\n        if (e.target.type == 'radio') {\n            const q = e.target.parentNode.parentNode.parentNode.firstChild.value.toLowerCase();\n            const a = e.target.value.toLowerCase();\n            const score = parseInt(e.target.getAttribute('data-score'));\n            const correctAns = e.target.getAttribute('data-ans').toLowerCase()\n            let userScore;\n\n            if (a === correctAns) {\n                userScore = score\n            } else {\n                userScore = parseInt(0);\n            }\n\n\n\n            if (userAnswer.length > 0) {\n                //prevent submission of the same question with different answers\n                const fnd = userAnswer.find(x => x.question == q);\n                if (!fnd) {\n                    userAnswer.push({\n                        question: q,\n                        ans: a,\n                        userScore\n                    })\n                } else {\n                    userAnswer.splice(userAnswer.findIndex(item => item.question === q), 1);\n\n                    userAnswer.push(\n                        {\n                            question: q,\n                            ans: a,\n                            userScore\n                        }\n                    )\n                }\n            } else {\n                userAnswer.push({\n                    question: q,\n                    ans: a,\n                    userScore\n\n                })\n\n            }\n        } else {\n\n        }\n\n        this.setState({ userAns: userAnswer });\n\n    }\n\n\n\n\n    submitAns = () => {\n        //attache corp id along with ans\n        const userData = JSON.parse(sessionStorage.getItem('key'));\n        const { name, email } = userData;\n\n        const { _id, service, corp_id, job_id, duration } = this.props.exercise;\n\n\n        //get user total score\n        const total = this.state.userAns.reduce((a, b) => {\n            return a + b.userScore ;\n        }, 0)\n\n\n        const data = {\n            user_id: userData.id,\n            corp_id: corp_id,\n            excercise_id: _id,\n            job_id: this.props.exercise.job_id,\n            service: service,\n            name: name,\n            email: email,\n            total_scored: total,\n            answers: this.state.userAns,\n            max_score: this.state.max_score\n\n        }\n\n        // send to db\n        try {\n            this.setState({submitting: true})\n            axios.post(`http://localhost:5000/answer/add`, data)\n                .then(res => {\n                    this.setState({ submitting: false })\n                    this.setState({ showScoreModal: true })\n\n                })\n                .catch(err => console.log(err))\n            //\n            \n        } catch (error) {\n            \n        }\n\n\n        this.setState({ page: 0 })\n\n    }\n\n    render() {\n\n        const { question, spinner } = this.state\n        const { duration } = this.props.exercise;\n\n        console.log(this.state.max_score)\n\n\n        return (\n            <>\n                {\n                    (this.state.page == 1) ? <StartBtn setStart={this.setStart} duration={this.props.duration} disabled={this.state.disabled} exTaken={this.state.exTaken} /> : (this.state.page == 2) ? <Quiz question={question} submitAns={this.submitAns} handelUserAns={this.handelUserAns} duration={duration} setPage={this.setPage} maxScore={this.maxScore}/> : (this.state.page == 3) ? <SubmitBtn submitAns={this.submitAns} /> : (this.state.page == 0) ? \"\" : \"\"\n                }\n            </>\n        );\n\n    }\n\n}\nexport default QuestionsComponent;"]},"metadata":{},"sourceType":"module"}