{"ast":null,"code":"import _slicedToArray from\"/Users/mac/Desktop/esgrown/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import axios from'axios';export default function ExcerciseRankings(_ref){var page=_ref.page;useEffect(function(){var user=JSON.parse(sessionStorage.getItem('key'));getJobs(user.id);},[]);// const [jobId, setJobId] = useState(\"\");\nvar _useState=useState([]),_useState2=_slicedToArray(_useState,2),data=_useState2[0],setData=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),jobs=_useState4[0],setJobs=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),rank=_useState6[0],setRank=_useState6[1];var ranking=[];var onChangeJob=function onChangeJob(e){// setJobId(e.target.value);\n// Use the Job Id to make a call to get all answers\nvar job_id=e.target.value;getAnswers(job_id);};console.log(rank);return React.createElement(React.Fragment,null,React.createElement(\"div\",{className:\"container\"},React.createElement(\"div\",{className:\"d-flex justify-content-center mt-4 mb-4\"},React.createElement(\"h2\",{style:{marginTop:'70px',fontFamily:'quicksand'}},\"Rankings Page\")),React.createElement(\"div\",{className:\"d-flex justify-content-center\"},React.createElement(\"select\",{className:\"form-control text-small\",onChange:onChangeJob,style:{width:'50%'}},React.createElement(\"option\",{value:\"null\"},\"Select the jobs to view Rankings\"),mapAllJobs()))),React.createElement(\"div\",{className:\"col\"},React.createElement(\"div\",{className:\"flex-column justify-content-center align-items-center mt-4\"},rankCard())));// Get all jobs by company id\nfunction getJobs(id){try{axios.get(\"http://localhost:5000/jobs/\".concat(id)).then(function(res){if(res.data.length!==0){setJobs(res.data[0].jobs);console.log(res.data[0].jobs);}else{console.log(\"no data\");}}).catch(function(err){return console.log(err);});}catch(error){console.log(error);}}function rankCard(){return rank.map(function(item){return React.createElement(\"div\",{style:{height:'50px',width:'60%',background:'silver'},className:\"d-flex justify-content-around align-items-center mb-3\"},React.createElement(\"div\",null,item.name),React.createElement(\"div\",null,\" \",item.percentage,\"% \",React.createElement(\"div\",{className:\"btn btn-info btn-sm ml-3\"},\"Induct\")));});}// Get all answers by job_id\nfunction getAnswers(jobId){try{axios.get(\"http://localhost:5000/answer/job/\".concat(jobId)).then(function(res){console.log(res.data);if(res.data.length>0){res.data.map(function(item){//  Calculate percentage\nvar percentage=item.total_scored/item.max_score*100;//  Define object to hold individuls percentage and name\nvar obj={name:item.name,percentage:Math.floor(percentage)};//  setRank(rank.concat(obj))\nranking.push(obj);});setRank(ranking);}// setData(res.data);\n}).catch(function(err){console.log(err);});}catch(error){console.log(error);}}// Get all jobs by corp_id\n// function getJobs(corpid) {\n//     try {\n//         axios.get(`http://localhost:5000/jobs/${corpid}`)\n//             .then(res => {\n//                 // console.log(res.data[0]);\n//                 setJobs(res.data[0].jobs);\n//             })\n//             .catch(err => {\n//                 console.log(err);\n//             });\n//     } catch (error) {\n//     }\n// }\n// map jobs function\nfunction mapAllJobs(){return jobs.map(function(item){return React.createElement(\"option\",{value:item.job_id},item.title);});}// Get all excercises that carry the Job id\n// function getAnswersByJob(corpid, jobid){\n//     try {\n//         setSpinner(true);\n//         axios.get(`http://localhost:5000/answer/${corpid}/${jobid}`)\n//                 .then(answers => { \n//                     setSpinner(false);\n//                     setAnswers(answers.data);\n//                 })\n//                 .catch(err => console.log(err));\n//     } catch (error) {\n//     }\n// }\n}","map":{"version":3,"sources":["/Users/mac/Desktop/esgrown/src/components/corp_dashboard_components/staff/excercise_rankings.js"],"names":["React","useState","useEffect","axios","ExcerciseRankings","page","user","JSON","parse","sessionStorage","getItem","getJobs","id","data","setData","jobs","setJobs","rank","setRank","ranking","onChangeJob","e","job_id","target","value","getAnswers","console","log","marginTop","fontFamily","width","mapAllJobs","rankCard","get","then","res","length","catch","err","error","map","item","height","background","name","percentage","jobId","total_scored","max_score","obj","Math","floor","push","title"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nexport default function ExcerciseRankings({ page }) {\n    useEffect(() => {\n        const user = JSON.parse(sessionStorage.getItem('key'));\n        getJobs(user.id);\n\n    }, []);\n    // const [jobId, setJobId] = useState(\"\");\n    const [data, setData] = useState([]);\n    const [jobs, setJobs] = useState([]);\n    const [rank, setRank] = useState([]);\n\n    let ranking = []\n\n    const onChangeJob = (e) => {\n        // setJobId(e.target.value);\n        // Use the Job Id to make a call to get all answers\n        const job_id = e.target.value;\n        getAnswers(job_id);\n    }\n    console.log(rank);\n    return (\n        <React.Fragment >\n            <div className=\"container\">\n                <div className=\"d-flex justify-content-center mt-4 mb-4\">\n                    <h2 style={{ marginTop: '70px', fontFamily: 'quicksand' }}>Rankings Page</h2>\n                </div>\n\n                <div className=\"d-flex justify-content-center\">\n                    <select className=\"form-control text-small\" onChange={onChangeJob} style={{ width: '50%' }}>\n                        <option value=\"null\">Select the jobs to view Rankings</option>\n                        {mapAllJobs()}\n                    </select>\n                </div>\n            </div>\n            <div className=\"col\">\n                <div className=\"flex-column justify-content-center align-items-center mt-4\">\n                    {/* Render Ranks here */}\n                    {rankCard()}\n                </div>\n            </div>\n        </React.Fragment>\n    );\n\n    // Get all jobs by company id\n    function getJobs(id){\n        try {\n            axios.get(`http://localhost:5000/jobs/${id}`)\n                .then(res => {\n                    if (res.data.length !== 0) {\n                        setJobs(res.data[0].jobs);\n                        console.log(res.data[0].jobs)\n                    } else {\n                        console.log(\"no data\")\n                    }\n                })\n                .catch(err => console.log(err));\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    function rankCard() {\n        return rank.map(item => (\n            <div style={{ height: '50px', width: '60%', background: 'silver', }} className=\"d-flex justify-content-around align-items-center mb-3\">\n                <div>{item.name}</div>\n                <div> {item.percentage}% <div className=\"btn btn-info btn-sm ml-3\">Induct</div></div>\n            </div>\n        ));\n    }\n\n    // Get all answers by job_id\n    function getAnswers(jobId) {\n\n        try {\n            axios.get(`http://localhost:5000/answer/job/${jobId}`)\n                .then(res => {\n                    console.log(res.data);\n\n                    if (res.data.length > 0) {\n\n                        res.data.map(item => {\n                            //  Calculate percentage\n                            const percentage = (item.total_scored / item.max_score) * 100;\n\n                            //  Define object to hold individuls percentage and name\n                            const obj = {\n                                name: item.name,\n                                percentage: Math.floor(percentage),\n                            };\n                            //  setRank(rank.concat(obj))\n                            ranking.push(obj);\n                        });\n\n                        setRank(ranking)\n\n                    }\n                    // setData(res.data);\n\n                })\n                .catch(err => {\n                    console.log(err);\n                })\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n\n    // Get all jobs by corp_id\n    // function getJobs(corpid) {\n    //     try {\n    //         axios.get(`http://localhost:5000/jobs/${corpid}`)\n    //             .then(res => {\n    //                 // console.log(res.data[0]);\n    //                 setJobs(res.data[0].jobs);\n    //             })\n    //             .catch(err => {\n    //                 console.log(err);\n    //             });\n    //     } catch (error) {\n\n    //     }\n    // }\n\n    // map jobs function\n    function mapAllJobs() {\n        return jobs.map(item => (\n            <option value={item.job_id}>{item.title}</option>\n        ))\n    }\n\n\n\n    // Get all excercises that carry the Job id\n    // function getAnswersByJob(corpid, jobid){\n    //     try {\n    //         setSpinner(true);\n    //         axios.get(`http://localhost:5000/answer/${corpid}/${jobid}`)\n    //                 .then(answers => { \n    //                     setSpinner(false);\n    //                     setAnswers(answers.data);\n    //                 })\n    //                 .catch(err => console.log(err));\n    //     } catch (error) {\n            \n    //     }\n    // }\n\n\n}"]},"metadata":{},"sourceType":"module"}