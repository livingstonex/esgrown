{"ast":null,"code":"import _objectSpread from \"/Users/mac/Desktop/projekte/esgrown/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/mac/Desktop/projekte/esgrown/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mac/Desktop/projekte/esgrown/src/components/corp_dashboard_components/services/content_rm/components/new_content.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Card, CardContent } from '@material-ui/core';\nimport { Spinner } from 'react-bootstrap';\nimport toast from '../../../../../util/toast';\n\nconst NewContent = ({\n  reloadContentLog\n}) => {\n  const _useState = useState({\n    title: '',\n    content: '',\n    job_title: '',\n    job_id: '',\n    job_deadline: ''\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        data = _useState2[0],\n        setData = _useState2[1];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        selectedFile = _useState4[0],\n        setSelectedFile = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        spinner = _useState6[0],\n        setSpinner = _useState6[1];\n\n  const _useState7 = useState(),\n        _useState8 = _slicedToArray(_useState7, 2),\n        comp = _useState8[0],\n        setComp = _useState8[1];\n\n  const _useState9 = useState([]),\n        _useState10 = _slicedToArray(_useState9, 2),\n        jobs = _useState10[0],\n        setJobs = _useState10[1];\n\n  useEffect(() => {\n    const comp = JSON.parse(sessionStorage.getItem(\"key\"));\n    setComp(comp);\n    getAllJobs(comp.id);\n  }, []);\n\n  const handleChange = e => {\n    const name = e.target.name;\n    const value = e.target.value;\n    setData(_objectSpread({}, data, {\n      [name]: value\n    }));\n  };\n\n  const handleJob = e => {\n    const splitValue = e.target.value;\n    const job_title = splitValue.split('/')[0];\n    const job_id = splitValue.split('/')[1];\n    const job_deadline = splitValue.split('/')[2];\n    setData(_objectSpread({}, data, {\n      job_title: job_title,\n      job_id: job_id,\n      job_deadline: job_deadline\n    }));\n  };\n\n  const selectImage = e => {\n    var file = e.target.files[0];\n    var reader = new FileReader();\n\n    reader.onloadend = function () {\n      setSelectedFile(reader.result);\n    };\n\n    reader.readAsDataURL(file);\n  };\n\n  const handleSubmit = e => {\n    setSpinner(true);\n    e.preventDefault(); //================= make job details is present b4 form is submited =======\n\n    if (data.job_id === '' || data.job_id === 'null') {\n      toast('you must select a job', 'warn');\n      setSpinner(false);\n      return;\n    } else {\n      const submitData = {\n        title: data.title,\n        content: data.content,\n        media: selectedFile,\n        corp_id: comp.id,\n        job_id: data.job_id,\n        job_deadline: data.job_deadline,\n        job_title: data.job_title\n      };\n      axios.post(`http://localhost:5000/corpservicecontent/add`, submitData).then(res => {\n        console.log(res.data);\n        setSpinner(false);\n        reloadContentLog(comp.id);\n        toast('new content created', 'success');\n      }).catch(err => {\n        setSpinner(false);\n        toast(err, 'error');\n      });\n      setData({\n        title: '',\n        content: '',\n        job_title: '',\n        job_id: '',\n        job_deadline: ''\n      });\n    }\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Card, {\n    className: \"col col-lg-6 col-sm-6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(CardContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(\"h6\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, \"Create Recruitment Content\"), React.createElement(\"form\", {\n    className: \"container py-4\",\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row mt-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    style: {\n      fontWeight: 'bold'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, \"Select a Job\"), React.createElement(\"select\", {\n    name: \"job\",\n    onChange: handleJob,\n    className: \"form-control\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"null\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, \"Select job\"), mapJobs()))), React.createElement(\"div\", {\n    className: \"row mt-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    style: {\n      fontWeight: 'bold'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, \"Content Title\"), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"title\",\n    value: data.title,\n    onChange: handleChange,\n    placeholder: \"Content Title\",\n    className: \"form-control\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"row mt-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    style: {\n      fontWeight: 'bold'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, \"Image / Video\"), React.createElement(\"input\", {\n    type: \"file\",\n    name: \"image\",\n    onChange: selectImage,\n    accept: \"image/*,video/*\",\n    className: \"form-control\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"row mt-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    style: {\n      fontWeight: 'bold'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, \"Content\"), React.createElement(\"textarea\", {\n    name: \"content\",\n    onChange: handleChange,\n    className: \"form-control\",\n    rows: \"10\",\n    placeholder: \"content body\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, data.content))), React.createElement(\"div\", {\n    className: \"row mt-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn font-weight-light mt-3 py-2 w-100 border-0\",\n    style: {\n      background: '#21A5E7',\n      color: 'white'\n    },\n    type: \"submit\",\n    disabled: spinner,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, \"Submit   \", spinner ? React.createElement(\"i\", {\n    className: \"fa fa-spinner fa-spin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }) : \"\"))))))); // Get all jobs by corpid\n\n  function getAllJobs(corpid) {\n    try {\n      axios.get(`http://localhost:5000/jobs/${corpid}`).then(jobs => {\n        // console.log(jobs.data[0].jobs);\n        setJobs(jobs.data[0].jobs);\n      }).catch(err => console.log('Error: ' + err));\n    } catch (error) {}\n  } // Map through all the jobs\n\n\n  function mapJobs() {\n    return jobs.map(item => React.createElement(\"option\", {\n      value: `${item.title}/${item.job_id}/${item.dead_line}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, item.title));\n  }\n};\n\nexport default NewContent;","map":{"version":3,"sources":["/Users/mac/Desktop/projekte/esgrown/src/components/corp_dashboard_components/services/content_rm/components/new_content.js"],"names":["React","useState","useEffect","axios","Card","CardContent","Spinner","toast","NewContent","reloadContentLog","title","content","job_title","job_id","job_deadline","data","setData","selectedFile","setSelectedFile","spinner","setSpinner","comp","setComp","jobs","setJobs","JSON","parse","sessionStorage","getItem","getAllJobs","id","handleChange","e","name","target","value","handleJob","splitValue","split","selectImage","file","files","reader","FileReader","onloadend","result","readAsDataURL","handleSubmit","preventDefault","submitData","media","corp_id","post","then","res","console","log","catch","err","fontWeight","mapJobs","background","color","corpid","get","error","map","item","dead_line"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Card, CardContent } from '@material-ui/core';\nimport { Spinner } from 'react-bootstrap';\nimport toast from '../../../../../util/toast';\n\n\n\nconst NewContent = ({ reloadContentLog}) => {\n\n    const [data, setData] = useState({\n        title: '',\n        content: '',\n        job_title: '',\n        job_id: '',\n        job_deadline: ''\n    });\n\n    const [selectedFile, setSelectedFile] = useState(null);\n\n\n    const [spinner, setSpinner] = useState(false)\n\n    const [comp, setComp] = useState();\n\n    const [jobs, setJobs] = useState([])\n\n    useEffect(() => {\n        const comp = JSON.parse(sessionStorage.getItem(\"key\"));\n        setComp(comp);\n        getAllJobs(comp.id);\n\n    }, []);\n\n    const handleChange = (e) => {\n        const name = e.target.name;\n        const value = e.target.value;\n        setData({\n            ...data,\n            [name]: value\n        })\n\n    }\n\n    const handleJob = (e) => {\n        const splitValue = e.target.value;\n\n        const job_title = splitValue.split('/')[0];\n        const job_id = splitValue.split('/')[1];\n        const job_deadline = splitValue.split('/')[2];\n\n        setData({ ...data, job_title: job_title, job_id: job_id, job_deadline: job_deadline });\n    }\n\n    const selectImage = (e) => {\n        var file = e.target.files[0];\n        var reader = new FileReader();\n\n        reader.onloadend = function () {\n            setSelectedFile(reader.result)\n        }\n        reader.readAsDataURL(file);\n    }\n\n\n    const handleSubmit = (e) => {\n        setSpinner(true)\n        e.preventDefault();\n\n        //================= make job details is present b4 form is submited =======\n        if ((data.job_id === '') || (data.job_id === 'null')) {\n            toast('you must select a job', 'warn')\n            setSpinner(false)\n            return\n        } else {\n            const submitData = {\n                title: data.title,\n                content: data.content,\n                media: selectedFile,\n                corp_id: comp.id,\n                job_id: data.job_id,\n                job_deadline: data.job_deadline,\n                job_title: data.job_title\n            }\n\n\n            axios.post(`http://localhost:5000/corpservicecontent/add`, submitData)\n                .then(res => {\n                    console.log(res.data)\n                    setSpinner(false)\n                    reloadContentLog(comp.id)\n                    toast('new content created', 'success');\n                })\n                .catch(err => {\n                    setSpinner(false);\n                    toast(err, 'error')\n                });\n\n            setData({\n                title: '',\n                content: '',\n                job_title: '',\n                job_id: '',\n                job_deadline: ''\n            })\n            \n        }\n\n        \n\n    }\n\n\n    return (\n        <>\n            <Card className=\"col col-lg-6 col-sm-6\">\n                <CardContent>\n                    <h6>Create Recruitment Content</h6>\n                    <form className=\"container py-4\" onSubmit={handleSubmit}>\n\n                        <div className=\"row mt-3\">\n                            <div className=\"col\">\n                                <label style={{ fontWeight: 'bold' }}>Select a Job</label>\n                                <select name=\"job\" onChange={handleJob} className=\"form-control\" required >\n                                    <option value=\"null\">Select job</option>\n                                    {mapJobs()}\n                                </select>\n                            </div>\n                        </div>\n\n                        <div className=\"row mt-3\">\n                            <div className=\"col\">\n                                <label style={{ fontWeight: 'bold' }}>Content Title</label>\n                                <input type=\"text\" name=\"title\" value={data.title} onChange={handleChange} placeholder=\"Content Title\" className=\"form-control\" required />\n                            </div>\n                        </div>\n\n                        <div className=\"row mt-3\">\n                            <div className=\"col\">\n                                <label style={{ fontWeight: 'bold' }}>Image / Video</label>\n                                <input type=\"file\" name=\"image\" onChange={selectImage} accept=\"image/*,video/*\" className=\"form-control\" required />\n                            </div>\n                        </div>\n\n                        <div className=\"row mt-3\">\n                            <div className=\"col\">\n                                <label style={{ fontWeight: 'bold' }}>Content</label>\n                                <textarea name=\"content\" onChange={handleChange} className=\"form-control\" rows=\"10\" placeholder=\"content body\" required>{data.content}</textarea>\n                            </div>\n                        </div>\n                        <div className=\"row mt-3\">\n                            <div className=\"col\">\n                                <button\n                                    className=\"btn font-weight-light mt-3 py-2 w-100 border-0\"\n                                    style={{ background: '#21A5E7', color: 'white' }}\n                                    type=\"submit\"\n                                    disabled={spinner}\n                                >\n                                    Submit   {spinner ? <i className=\"fa fa-spinner fa-spin\"></i> : \"\"}\n                                </button>\n                            </div>\n                        </div>\n                    </form>\n                </CardContent>\n            </Card>\n        </>\n    );\n\n    // Get all jobs by corpid\n    function getAllJobs(corpid) {\n        try {\n            axios.get(`http://localhost:5000/jobs/${corpid}`)\n                .then(jobs => {\n                    // console.log(jobs.data[0].jobs);\n                    setJobs(jobs.data[0].jobs);\n                })\n                .catch(err => console.log('Error: ' + err));\n        } catch (error) {\n\n        }\n    }\n\n    // Map through all the jobs\n    function mapJobs() {\n        return jobs.map(item => (\n            <option value={`${item.title}/${item.job_id}/${item.dead_line}`}>{item.title}</option>\n        ))\n    }\n\n}\nexport default NewContent;"]},"metadata":{},"sourceType":"module"}