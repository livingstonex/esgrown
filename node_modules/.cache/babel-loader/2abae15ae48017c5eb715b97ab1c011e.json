{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/projekte/esgrown/src/components/ind_dashboard_components/exercises/questionscomponent.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { Spinner } from 'react-bootstrap';\nimport Quiz from './quiz';\nimport SubmitBtn from './submitbtn';\nimport StartBtn from './startbtn';\nlet userAnswer = [];\n\nclass QuestionsComponent extends Component {\n  //userAnswer = [];\n  constructor(props) {\n    super(props);\n\n    this.setStart = () => {\n      this.setState({\n        page: 2\n      }); // this.startTimer()\n    };\n\n    this.setPage = () => {\n      this.setState({\n        page: 3\n      });\n    };\n\n    this.handelUserAns = e => {\n      //check if user ans is correct ie user ans should be equal to question correct ans. if correct user score is equal to quetion.score else 0. add user score to the posted object\n      if (e.target.type == 'radio') {\n        const q = e.target.parentNode.parentNode.parentNode.firstChild.value;\n        const a = e.target.value;\n        const score = e.target.getAttribute('data-score');\n        const correctAns = e.target.getAttribute('data-ans');\n        let userScore;\n\n        if (a === correctAns) {\n          userScore = parseInt(score);\n        } else {\n          userScore = 0;\n        }\n\n        if (userAnswer.length > 0) {\n          const fnd = userAnswer.find(x => x.question == q);\n\n          if (!fnd) {\n            userAnswer.push({\n              question: q,\n              ans: a,\n              userScore\n            });\n          } else {\n            userAnswer.splice(userAnswer.findIndex(item => item.question === q), 1);\n            userAnswer.push({\n              question: q,\n              ans: a,\n              userScore\n            });\n          }\n        } else {\n          userAnswer.push({\n            question: q,\n            ans: a,\n            userScore\n          });\n        }\n      } else {}\n\n      this.setState({\n        userAns: userAnswer\n      });\n    };\n\n    this.submitAns = () => {\n      //attache corp id along with ans\n      const userData = JSON.parse(sessionStorage.getItem('key'));\n      const name = userData.name,\n            email = userData.email;\n      const _this$props = this.props,\n            exerciseId = _this$props.exerciseId,\n            service = _this$props.service,\n            corpExerciseOwner = _this$props.corpExerciseOwner;\n      const data = {\n        user_id: userData.id,\n        corp_id: corpExerciseOwner,\n        excercise_id: exerciseId,\n        // job_id: jobID,\n        service: service,\n        name: name,\n        email: email,\n        answers: this.state.userAns\n      }; //send to db\n\n      axios.post(`http://localhost:5000/answer/add`, data).then(res => console.log(res)).catch(err => console.log(err));\n      this.setState({\n        page: 0\n      });\n    };\n\n    this.state = {\n      currentCount: this.props.duration + 1,\n      activeStep: 0,\n      userAns: [],\n      page: 1,\n      spinner: true\n    };\n  } // timer() {\n  //     this.setState({\n  //         currentCount: this.state.currentCount - 1\n  //     })\n  //     if (this.state.currentCount < 1) {\n  //         clearInterval(this.intervalId);\n  //         this.setState({ page: 3 })\n  //     }\n  // }\n  // startTimer() {\n  //     this.setState({ currentCount: this.props.duration * 60 });\n  //     setInterval(this.timer.bind(this), 1000);\n  // }\n\n\n  componentDidMount() {\n    // this.intervalId = setInterval(this.timer.bind(this), 1000);\n    //get questions\n    axios.post(`http://localhost:5000/question/${this.props.exerciseId}`).then(res => {\n      if (res.data.length > 0) {\n        this.setState({\n          question: res.data,\n          spinner: false\n        });\n      }\n    }).catch(err => console.log(err));\n\n    if (this.state.spinner == false) {\n      this.setState({\n        page: 1\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalId);\n  }\n\n  render() {\n    const _this$state = this.state,\n          question = _this$state.question,\n          spinner = _this$state.spinner;\n    return React.createElement(React.Fragment, null, this.state.page == 1 ? React.createElement(StartBtn, {\n      setStart: this.setStart,\n      duration: this.props.duration,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }) : this.state.page == 2 ? React.createElement(Quiz, {\n      question: question,\n      submitAns: this.submitAns,\n      handelUserAns: this.handelUserAns,\n      duration: this.props.duration,\n      setPage: this.setPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }) : this.state.page == 3 ? React.createElement(SubmitBtn, {\n      submitAns: this.submitAns,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }) : this.state.page == 0 ? \"\" : \"\");\n  }\n\n}\n\nexport default QuestionsComponent;","map":{"version":3,"sources":["/Users/mac/Desktop/projekte/esgrown/src/components/ind_dashboard_components/exercises/questionscomponent.js"],"names":["React","Component","axios","Spinner","Quiz","SubmitBtn","StartBtn","userAnswer","QuestionsComponent","constructor","props","setStart","setState","page","setPage","handelUserAns","e","target","type","q","parentNode","firstChild","value","a","score","getAttribute","correctAns","userScore","parseInt","length","fnd","find","x","question","push","ans","splice","findIndex","item","userAns","submitAns","userData","JSON","parse","sessionStorage","getItem","name","email","exerciseId","service","corpExerciseOwner","data","user_id","id","corp_id","excercise_id","answers","state","post","then","res","console","log","catch","err","currentCount","duration","activeStep","spinner","componentDidMount","componentWillUnmount","clearInterval","intervalId","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Spinner } from 'react-bootstrap';\nimport Quiz from './quiz';\nimport SubmitBtn from './submitbtn';\nimport StartBtn from './startbtn';\n\n\n\nlet userAnswer = [];\n\n\nclass QuestionsComponent extends Component {\n    //userAnswer = [];\n    constructor(props) {\n\n        super(props);\n\n        this.state = {\n            currentCount: this.props.duration + 1,\n            activeStep: 0,\n            userAns: [],\n            page: 1,\n            spinner: true,\n        }\n\n    }\n\n\n    // timer() {\n    //     this.setState({\n    //         currentCount: this.state.currentCount - 1\n    //     })\n    //     if (this.state.currentCount < 1) {\n    //         clearInterval(this.intervalId);\n    //         this.setState({ page: 3 })\n    //     }\n    // }\n\n    // startTimer() {\n    //     this.setState({ currentCount: this.props.duration * 60 });\n    //     setInterval(this.timer.bind(this), 1000);\n    // }\n\n    componentDidMount() {\n        // this.intervalId = setInterval(this.timer.bind(this), 1000);\n\n\n        //get questions\n        axios.post(`http://localhost:5000/question/${this.props.exerciseId}`)\n            .then(res => {\n                if (res.data.length > 0) {\n                    this.setState({\n                        question: res.data,\n                        spinner: false\n                    })\n                }\n            })\n            .catch(err => console.log(err));\n\n        if (this.state.spinner == false) {\n            this.setState({ page: 1 })\n        }\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.intervalId);\n    }\n\n\n    setStart = () => {\n        this.setState({ page: 2 })\n        // this.startTimer()\n    }\n\n    setPage = () => {\n        this.setState({page: 3})\n    }\n\n    handelUserAns = (e) => {\n        //check if user ans is correct ie user ans should be equal to question correct ans. if correct user score is equal to quetion.score else 0. add user score to the posted object\n        if (e.target.type == 'radio') {\n            const q = e.target.parentNode.parentNode.parentNode.firstChild.value;\n            const a = e.target.value;\n            const score = e.target.getAttribute('data-score');\n            const correctAns = e.target.getAttribute('data-ans')\n            let userScore;\n\n            if (a === correctAns) {\n                userScore = parseInt(score)\n            } else {\n                userScore = 0;\n            }\n\n            if (userAnswer.length > 0) {\n                const fnd = userAnswer.find(x => x.question == q);\n                if (!fnd) {\n                    userAnswer.push({\n                        question: q,\n                        ans: a,\n                        userScore\n                    })\n                } else {\n                    userAnswer.splice(userAnswer.findIndex(item => item.question === q), 1)\n                    userAnswer.push(\n                        {\n                            question: q,\n                            ans: a,\n                            userScore\n\n                        }\n                    )\n                }\n            } else {\n                userAnswer.push({\n                    question: q,\n                    ans: a,\n                    userScore\n\n                })\n\n            }\n        } else {\n\n        }\n\n        this.setState({ userAns: userAnswer });\n\n    }\n\n\n\n\n    submitAns = () => {\n        //attache corp id along with ans\n        const userData = JSON.parse(sessionStorage.getItem('key'));\n        const { name, email } = userData;\n\n        const { exerciseId, service, corpExerciseOwner } = this.props;\n\n        const data = {\n            user_id: userData.id,\n            corp_id: corpExerciseOwner,\n            excercise_id: exerciseId,\n            // job_id: jobID,\n            service: service,\n            name: name,\n            email: email,\n            answers: this.state.userAns\n\n        }\n\n        //send to db\n        axios.post(`http://localhost:5000/answer/add`, data)\n            .then(res => console.log(res))\n            .catch(err => console.log(err))\n\n\n        this.setState({ page: 0 })\n\n    }\n\n\n    render() {\n\n        const { question, spinner } = this.state\n\n\n        return (\n            <>\n                {\n                    (this.state.page == 1) ? <StartBtn setStart={this.setStart} duration={this.props.duration} /> : (this.state.page == 2) ? <Quiz question={question} submitAns={this.submitAns} handelUserAns={this.handelUserAns} duration={this.props.duration} setPage={this.setPage} /> : (this.state.page == 3) ? <SubmitBtn submitAns={this.submitAns} /> : (this.state.page == 0) ? \"\" : \"\"\n                }\n            </>\n        );\n\n    }\n\n}\nexport default QuestionsComponent;"]},"metadata":{},"sourceType":"module"}