{"ast":null,"code":"import _slicedToArray from \"/Users/mac/Desktop/projekte/esgrown/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mac/Desktop/projekte/esgrown/src/components/ind_dashboard_components/exercises/quiz.js\";\nimport React, { useState, useEffect } from 'react';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepContent from '@material-ui/core/StepContent';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport TimerComponent from './timer';\nimport { Card } from 'react-bootstrap';\n\nconst Quiz = ({\n  question,\n  handelUserAns,\n  submitAns,\n  duration,\n  setPage,\n  maxScore\n}) => {\n  useEffect(() => {\n    maxScore(question);\n  }, [maxScore, question]);\n\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        activeStep = _useState2[0],\n        setActiveStep = _useState2[1];\n\n  const handleNext = () => {\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container text-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"d-flex justify-content-center align-items-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(Card, {\n    style: {\n      marginLeft: '50%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(Card.Body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    gutterBottom: true,\n    variant: \"\",\n    component: \"h5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"Number of Questions: \", question ? question.length : \"\"), React.createElement(Typography, {\n    gutterBottom: true,\n    variant: \"\",\n    component: \"h6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(TimerComponent, {\n    duration: duration,\n    setPage: setPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }))))), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"container\",\n    style: {\n      background: '#53A6E7',\n      width: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"d-flex justify-content-center align-items-center\",\n    style: {\n      background: 'red',\n      width: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(Card, {\n    style: {\n      width: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(Card.Body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(Stepper, {\n    activeStep: activeStep,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, question ? question.map(q => {\n    return React.createElement(Step, {\n      key: q.question,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(StepContent, {\n      style: {\n        fontSize: '20px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, q.question), React.createElement(StepContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"hidden\",\n      value: q.question,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), React.createElement(Typography, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, q.options.map(a => {\n      let questionOptions;\n\n      if (q.correct_ans.length > 1) {\n        questionOptions = React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          type: \"checkbox\",\n          value: a,\n          \"data-score\": q.score,\n          onChange: handelUserAns,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        }), \" \", a);\n      } else {\n        questionOptions = React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          type: \"radio\",\n          name: \"ans\",\n          value: a,\n          \"data-score\": q.score,\n          \"data-ans\": q.correct_ans[0],\n          onChange: handelUserAns,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        }), \" \", a);\n      }\n\n      return questionOptions;\n    })), React.createElement(\"div\", {\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: handleNext,\n      className: \"\",\n      id: activeStep,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, activeStep === (question ? question.length - 1 : \"\") ? React.createElement(\"span\", {\n      onClick: () => submitAns(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"Finish\") : 'Next')))));\n  }) : \"\"), activeStep === question ? question.length && React.createElement(Paper, {\n    square: true,\n    elevation: 0,\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \"All steps completed - you 're finished\"), React.createElement(Button, {\n    className: \"\",\n    color: \"primary\",\n    variant: \"contained\",\n    onClick: submitAns,\n    id: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \"submit Ans\")) : \"\"))))));\n};\n\nexport default Quiz;","map":{"version":3,"sources":["/Users/mac/Desktop/projekte/esgrown/src/components/ind_dashboard_components/exercises/quiz.js"],"names":["React","useState","useEffect","Stepper","Step","StepContent","Button","Paper","Typography","TimerComponent","Card","Quiz","question","handelUserAns","submitAns","duration","setPage","maxScore","activeStep","setActiveStep","handleNext","prevActiveStep","marginLeft","length","background","width","map","q","fontSize","options","a","questionOptions","correct_ans","score"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepContent from '@material-ui/core/StepContent';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport TimerComponent from './timer';\nimport { Card } from 'react-bootstrap';\n\n\nconst Quiz = ({ question, handelUserAns, submitAns, duration, setPage, maxScore }) => {\n\n    useEffect(() => {\n        maxScore(question)\n\n    }, [maxScore,question])\n\n    const [activeStep, setActiveStep] = useState(0);\n\n\n\n    const handleNext = () => {\n        setActiveStep(prevActiveStep => prevActiveStep + 1);\n\n    };\n\n\n    return (\n        <>\n            <div className=\"row\">\n                <div className=\"container text-center\">\n                    <div className=\"d-flex justify-content-center align-items-center\">\n                        <Card style={{ marginLeft: '50%' }}>\n                            <Card.Body>\n                                {/* <span style={{ fontSize: '18px', fontWeight: 'bolder' }}>Number of Questions: {question ? question.length : \"\"}  */}\n                                <Typography gutterBottom variant=\"\" component=\"h5\">\n                                    Number of Questions: {question ? question.length : \"\"}\n                                    {/* </span> */}\n                                </Typography>\n                                <Typography gutterBottom variant=\"\" component=\"h6\">\n                                    <TimerComponent duration={duration} setPage={setPage} />\n                                </Typography>\n                            </Card.Body>\n                        </Card>\n                    </div><br />\n                </div>\n                <div className=\"container\" style={{ background: '#53A6E7', width: '100%' }}>\n                    <div className=\"d-flex justify-content-center align-items-center\" style={{ background: 'red', width: '100%' }}>\n                        <Card style={{ width: '100%' }}>\n                            <Card.Body>\n                                <Stepper activeStep={activeStep}>\n                                    {question ? question.map((q) => {\n                                        return <Step key={q.question}>\n                                            <StepContent style={{ fontSize: '20px' }}>{q.question}</StepContent>\n                                            <StepContent>\n                                                <input type=\"hidden\" value={q.question} />\n                                                <Typography>\n                                                    {q.options.map(a => {\n                                                        let questionOptions;\n                                                        if (q.correct_ans.length > 1) {\n                                                            questionOptions = <div>\n                                                                <input type=\"checkbox\" value={a} data-score={q.score} onChange={handelUserAns} /> {a}\n                                                            </div>\n                                                        } else {\n                                                            questionOptions = <div>\n                                                                <input type=\"radio\" name=\"ans\" value={a} data-score={q.score} data-ans={q.correct_ans[0]} onChange={handelUserAns} /> {a}\n                                                            </div>;\n                                                        }\n\n                                                        return questionOptions;\n                                                    })}</Typography>\n                                                <div className=\"\">\n                                                    <div>\n                                                        <Button\n                                                            variant=\"contained\"\n                                                            color=\"primary\"\n                                                            onClick={handleNext}\n                                                            className=\"\"\n                                                            id={activeStep}\n                                                        >\n                                                            {activeStep === (question ? question.length - 1 : \"\") ? <span onClick={() => submitAns()}>Finish</span> : 'Next'}\n                                                        </Button>\n                                                    </div>\n                                                </div>\n                                            </StepContent>\n                                        </Step>\n                                    }\n  \n                                    ) : \"\"}\n                                </Stepper>\n                                {activeStep === question ? question.length && (\n                                    <Paper square elevation={0} className=\"\">\n                                        <Typography>All steps completed - you &apos;re finished</Typography>\n\n                                        <Button\n                                            className=\"\"\n                                            color=\"primary\"\n                                            variant=\"contained\"\n                                            onClick={submitAns}\n                                            id=\"submit\"\n                                        >\n                                            submit Ans\n                                        </Button>\n                                    </Paper>\n                                ) : \"\"}\n                            </Card.Body>\n                        </Card>\n                        {/* <span style={{ fontSize: '18px', color: '#E68824' }}>{countDown} Seconds left</span> */}\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default Quiz;"]},"metadata":{},"sourceType":"module"}