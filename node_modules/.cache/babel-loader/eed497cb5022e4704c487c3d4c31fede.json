{"ast":null,"code":"import _slicedToArray from \"/Users/mac/Desktop/projekte/esgrown/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mac/Desktop/projekte/esgrown/src/components/corp_dashboard_components/services/content_rm/components/content_log.js\";\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Spinner, Accordion, Button, Card } from 'react-bootstrap';\n\nconst Contentlog = () => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        data = _useState2[0],\n        setData = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        user = _useState4[0],\n        setUser = _useState4[1];\n\n  const _useState5 = useState(true),\n        _useState6 = _slicedToArray(_useState5, 2),\n        spinner = _useState6[0],\n        setSpinner = _useState6[1];\n\n  useEffect(() => {\n    const user = JSON.parse(sessionStorage.getItem('key'));\n    setUser(user);\n    axios.get(`http://localhost:5000/corpservicecontent/corp/${user.id}`).then(res => {\n      console.log(res.data);\n      setData(res.data);\n      setSpinner(false);\n    }).catch(err => {\n      console.log(err);\n    });\n  }, []);\n  return React.createElement(React.Fragment, null, React.createElement(Card, {\n    style: {\n      padding: '5px',\n      height: '800px',\n      overflow: 'scroll',\n      marginRight: '20px'\n    },\n    className: \"col col-lg-5 col-sm-6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, spinner ? React.createElement(Spinner, {\n    animation: \"grow\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }) : data.length === 0 ? React.createElement(\"div\", {\n    className: \"d-flex justify-content-center\",\n    style: {\n      fontSize: '25px',\n      fontFamily: 'quicksand',\n      color: 'grey'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"No Content Yet\") : React.createElement(Accordion, {\n    defaultActiveKey: \"0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, data.map(data => {\n    return React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: data._id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, data.title, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }), React.createElement(\"small\", {\n      style: {\n        fontSize: '13px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"Published: \", data.is_published ? \"true\" : \"false\"))), React.createElement(Accordion.Collapse, {\n      eventKey: data._id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, data.content, data.media ? data.media.split(';')[0].split(':')[1].split('/')[0] == \"image\" ? React.createElement(\"img\", {\n      src: data.media,\n      style: {\n        height: '100px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }) : React.createElement(\"video\", {\n      src: data.media,\n      controls: true,\n      style: {\n        height: '100px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }) : '')));\n  }))));\n};\n\nexport default Contentlog;","map":{"version":3,"sources":["/Users/mac/Desktop/projekte/esgrown/src/components/corp_dashboard_components/services/content_rm/components/content_log.js"],"names":["React","useEffect","useState","axios","Spinner","Accordion","Button","Card","Contentlog","data","setData","user","setUser","spinner","setSpinner","JSON","parse","sessionStorage","getItem","get","id","then","res","console","log","catch","err","padding","height","overflow","marginRight","length","fontSize","fontFamily","color","map","_id","title","is_published","content","media","split"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Spinner, Accordion, Button, Card } from 'react-bootstrap';\n\n\n\n\nconst Contentlog = () => {\n\n    const [data, setData] = useState([]);\n    const [user, setUser] = useState([]);\n    const [spinner, setSpinner] = useState(true);\n\n    useEffect(() => { \n        const user = JSON.parse(sessionStorage.getItem('key'));\n        setUser(user)\n\n        axios.get(`http://localhost:5000/corpservicecontent/corp/${user.id}`)\n            .then(res => {\n                console.log(res.data)\n                setData(res.data);\n                setSpinner(false)\n            })\n            .catch(err => {\n                console.log(err);\n            });\n    }, []);\n    \n    return (\n        <>\n            <Card style={{ padding: '5px', height: '800px', overflow: 'scroll', marginRight: '20px' }} className=\"col col-lg-5 col-sm-6\">\n                {/* <h6 style={{ textAlign: 'center' }}>{title}</h6> */}\n                {spinner ? <Spinner animation=\"grow\" /> : data.length === 0 ? <div className=\"d-flex justify-content-center\" style={{fontSize:'25px',fontFamily: 'quicksand',color:'grey'}}>No Content Yet</div> :\n                    <Accordion defaultActiveKey=\"0\">\n                        {data.map(data => {\n                            return (\n                                <Card>\n                                    <Card.Header>\n                                        <Accordion.Toggle as={Button} variant=\"link\" eventKey={data._id}>\n                                            {data.title}<br /><small style={{ fontSize: '13px' }}>Published: {data.is_published ? \"true\" : \"false\"}</small>\n                                        </Accordion.Toggle>\n                                    </Card.Header>\n                                    <Accordion.Collapse eventKey={data._id}>\n                                        <Card.Body>\n                                            {data.content}\n                                            {\n                                                data.media ? data.media.split(';')[0].split(':')[1].split('/')[0] == \"image\" ? <img src={data.media} style={{ height: '100px' }} /> : <video src={data.media} controls style={{ height: '100px' }}></video> : ''\n                                            }\n                                        </Card.Body>\n\n                                    </Accordion.Collapse>\n                                </Card>\n                            )\n                        })}\n                    </Accordion>\n                    \n                }\n            </Card>\n        </>\n    );\n}\nexport default Contentlog;\n"]},"metadata":{},"sourceType":"module"}