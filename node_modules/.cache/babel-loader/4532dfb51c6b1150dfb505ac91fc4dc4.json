{"ast":null,"code":"import _slicedToArray from\"/Users/mac/Desktop/esgrown/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import axios from'axios';import{Card,CardContent}from'@material-ui/core';import{Spinner}from'react-bootstrap';import{set}from'mongoose';var NewExercises=function NewExercises(_ref){var service=_ref.service,refreshContentLog=_ref.refreshContentLog,title=_ref.title;var exUrl=\"http://localhost:5000/excercise/add\";var _useState=useState(0),_useState2=_slicedToArray(_useState,2),page=_useState2[0],setPage=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),spinner=_useState4[0],setSpinner=_useState4[1];//Exercises\nvar _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),extitle=_useState6[0],setExTitle=_useState6[1];var _useState7=useState(''),_useState8=_slicedToArray(_useState7,2),exduration=_useState8[0],setExDuration=_useState8[1];//questions\nvar _useState9=useState(''),_useState10=_slicedToArray(_useState9,2),exId=_useState10[0],setExId=_useState10[1];var _useState11=useState(''),_useState12=_slicedToArray(_useState11,2),question=_useState12[0],setQuestion=_useState12[1];var _useState13=useState([]),_useState14=_slicedToArray(_useState13,2),options=_useState14[0],setOptions=_useState14[1];var _useState15=useState([]),_useState16=_slicedToArray(_useState15,2),ans=_useState16[0],setAns=_useState16[1];var _useState17=useState(''),_useState18=_slicedToArray(_useState17,2),score=_useState18[0],setScore=_useState18[1];var _useState19=useState(0),_useState20=_slicedToArray(_useState19,2),totalQ=_useState20[0],setTotalQ=_useState20[1];//admin creating this exercise\nvar _useState21=useState(),_useState22=_slicedToArray(_useState21,2),admin=_useState22[0],setAdmin=_useState22[1];var _useState23=useState(),_useState24=_slicedToArray(_useState23,2),corpId=_useState24[0],setCorpId=_useState24[1];var _useState25=useState(''),_useState26=_slicedToArray(_useState25,2),jobId=_useState26[0],setJobId=_useState26[1];// List of all jobs returned from api\nvar _useState27=useState([]),_useState28=_slicedToArray(_useState27,2),jobs=_useState28[0],setJobs=_useState28[1];//get logged in Admin\nuseEffect(function(){var admin=JSON.parse(sessionStorage.getItem(\"key\"));admin.status=='corporate'?setCorpId(admin.id):setAdmin(admin.id);getAllJobs(admin.id);},[]);// question functions\nvar handleOptions=function handleOptions(e){setOptions(e.target.value);};var handleAns=function handleAns(e){setAns(e.target.value);};var handleQuestion=function handleQuestion(e){setQuestion(e.target.value);};var handleScore=function handleScore(e){var value=e.target.value;setScore(value);};var createQuestion=function createQuestion(){setSpinner(true);var splitOptions=options.split(',');var splitAns=ans.split(',');var questionData={excercise_id:exId,question:question,options:splitOptions,correct_ans:splitAns,score:score};axios.post(\"http://localhost:5000/question/add\",questionData).then(function(res){console.log(res.data);setSpinner(false);setAns('');setQuestion('');setOptions('');setScore('');setExId(res.data.excercise_id);//get number of questions and display\naxios.post(\"http://localhost:5000/question/\".concat(res.data.excercise_id)).then(function(res){return setTotalQ(res.data.length);}).catch(function(err){return console.log(err);});}).catch(function(err){return console.log(err);});console.log(questionData);};//exercise functions\nvar handleExTitle=function handleExTitle(e){var value=e.target.value;setExTitle(value);};var handleExDuration=function handleExDuration(e){var value=e.target.value;setExDuration(value);};var createExercise=function createExercise(){var exData={title:extitle,duration:exduration,service:service,admin_id:admin?admin:null,corp_id:corpId?corpId:null,job_id:jobId};// if (extitle == \"\") {\n//     return\n// }\n// if (exduration == \"\") {\n//     return\n// }\n// if (jobId == \"\") {\n//     alert('you need to choose a job')\n//     return;\n// } \nsetSpinner(true);axios.post(exUrl,exData).then(function(res){setExId(res.data._id);setSpinner(false);setPage(2);refreshContentLog();console.log(res.data);}).catch(function(err){alert('oops '+err);});console.log(exData);};//page display logic\nvar setExForm=function setExForm(){setPage(1);};var setQuesForm=function setQuesForm(){setPage(2);};// onChange Job\nvar onChangeJob=function onChangeJob(e){var job_id=e.target.value;setJobId(job_id);};return React.createElement(React.Fragment,null,React.createElement(Card,{className:\"col col-lg-6 col-sm-6\",style:{overflow:'scroll'}},React.createElement(CardContent,null,React.createElement(\"h6\",{style:{textAlign:'center'}},title),React.createElement(\"hr\",null),page==0?React.createElement(React.Fragment,null,React.createElement(\"div\",{style:{height:'100px'}}),React.createElement(\"button\",{className:\"btn font-weight-bold mt-3 py-2 w-100 border-0\",style:{background:'#21A5E7',color:'white'},onClick:setExForm},\"Create Exercise\")):page==1?React.createElement(React.Fragment,null,React.createElement(\"div\",{className:\"row mt-3\"},React.createElement(\"div\",{className:\"col\"},React.createElement(\"label\",{style:{fontWeight:'bold'}},\"Select Job\"),React.createElement(\"select\",{onChange:onChangeJob,className:\"form-control text-small\"},React.createElement(\"option\",null,\"Select Job this exercise is for\"),mapJobs()))),React.createElement(\"div\",{className:\"row mt-3\"},React.createElement(\"div\",{className:\"col\"},React.createElement(\"label\",{style:{fontWeight:'bold'}},\"Exercise Title\"),React.createElement(\"input\",{type:\"text\",name:\"title\",value:extitle,onChange:handleExTitle,placeholder:\"Exercise Title\",className:\"form-control\",required:true}))),React.createElement(\"div\",{className:\"row mt-3\"},React.createElement(\"div\",{className:\"col\"},React.createElement(\"label\",{style:{fontWeight:'bold'}},\"Exercise Duration\"),React.createElement(\"input\",{type:\"number\",name:\"duration\",value:exduration,onChange:handleExDuration,placeholder:\"Time Allowed for this Exercise Eg 20\",className:\"form-control\",required:true}))),React.createElement(\"div\",{className:\"row mt-3\"},React.createElement(\"div\",{className:\"col\"},React.createElement(\"button\",{className:\"btn font-weight-light mt-3 w-100 border-0\",style:{background:'#21A5E7',color:'white'},onClick:createExercise},spinner?React.createElement(Spinner,{as:\"span\",animation:\"grow\",size:\"sm\",role:\"status\",\"aria-hidden\":\"true\"}):\"Create New Exercise\")))):page==2?React.createElement(React.Fragment,null,React.createElement(\"span\",{style:{fontWeight:'bold'}},React.createElement(\"u\",null,\"Exercise: \",extitle)),React.createElement(\"br\",null),React.createElement(\"span\",{style:{fontWeight:'bold'}},React.createElement(\"u\",null,\"Number of questions: \",totalQ)),React.createElement(\"hr\",null),React.createElement(\"div\",{className:\"row mt-3\"},React.createElement(\"div\",{className:\"col\"},React.createElement(\"label\",{style:{fontWeight:'bold'}},\"Question\"),React.createElement(\"input\",{type:\"text\",name:\"title\",value:question,onChange:handleQuestion,placeholder:\"Question\",className:\"form-control\",required:true}))),React.createElement(\"div\",{className:\"row mt-3\"},React.createElement(\"div\",{className:\"col\"},React.createElement(\"label\",{style:{fontWeight:'bold'}},\"Options\"),React.createElement(\"textarea\",{cols:\"5\",rows:\"3\",value:options,onChange:handleOptions,className:\"form-control\",placeholder:\"Eg rice,beans,garri\"}))),React.createElement(\"div\",{className:\"row mt-3\"},React.createElement(\"div\",{className:\"col\"},React.createElement(\"label\",{style:{fontWeight:'bold'}},\"Corrects Answer / Answers\"),React.createElement(\"textarea\",{cols:\"5\",rows:\"3\",value:ans,className:\"form-control\",onChange:handleAns,placeholder:\"Eg rice,beans\"}))),React.createElement(\"div\",{className:\"row mt-3\"},React.createElement(\"div\",{className:\"col\"},React.createElement(\"label\",{style:{fontWeight:'bold'}},\"Score\"),React.createElement(\"input\",{type:\"number\",value:score,onChange:handleScore,className:\"form-control\",placeholder:\"Eg 10\"}))),React.createElement(\"div\",{className:\"row mt-3\"},React.createElement(\"div\",{className:\"col\"},React.createElement(\"button\",{className:\"btn font-weight-light mt-3 w-100 border-0\",style:{background:'#21A5E7',color:'white'},onClick:createQuestion},spinner?React.createElement(Spinner,{as:\"span\",animation:\"grow\",size:\"sm\",role:\"status\",\"aria-hidden\":\"true\"}):\"Create Question\")))):\"\")));// Get all jobs by corpid\nfunction getAllJobs(corpid){try{axios.get(\"http://localhost:5000/jobs/\".concat(corpid)).then(function(jobs){// console.log(jobs.data[0].jobs);\nsetJobs(jobs.data[0].jobs);}).catch(function(err){return console.log('Error: '+err);});}catch(error){}}// Map through all the jobs\nfunction mapJobs(){return jobs.map(function(item){return React.createElement(\"option\",{value:item.job_id},item.title);});}};export default NewExercises;","map":{"version":3,"sources":["/Users/mac/Desktop/esgrown/src/components/admin/exercises/components/new_exercise.js"],"names":["React","useState","useEffect","axios","Card","CardContent","Spinner","set","NewExercises","service","refreshContentLog","title","exUrl","page","setPage","spinner","setSpinner","extitle","setExTitle","exduration","setExDuration","exId","setExId","question","setQuestion","options","setOptions","ans","setAns","score","setScore","totalQ","setTotalQ","admin","setAdmin","corpId","setCorpId","jobId","setJobId","jobs","setJobs","JSON","parse","sessionStorage","getItem","status","id","getAllJobs","handleOptions","e","target","value","handleAns","handleQuestion","handleScore","createQuestion","splitOptions","split","splitAns","questionData","excercise_id","correct_ans","post","then","res","console","log","data","length","catch","err","handleExTitle","handleExDuration","createExercise","exData","duration","admin_id","corp_id","job_id","_id","alert","setExForm","setQuesForm","onChangeJob","overflow","textAlign","height","background","color","fontWeight","mapJobs","corpid","get","error","map","item"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Card, CardContent } from '@material-ui/core';\nimport { Spinner } from 'react-bootstrap';\nimport { set } from 'mongoose';\n\n\n\nconst NewExercises = ({ service, refreshContentLog, title}) => {\n\n    const exUrl = `http://localhost:5000/excercise/add`;\n\n    const [page, setPage] = useState(0)\n\n\n    const [spinner, setSpinner] = useState(false);\n\n    //Exercises\n    const [extitle, setExTitle] = useState('');\n    const [exduration, setExDuration] = useState('');\n\n    //questions\n    const [exId, setExId] = useState('');\n    const [question, setQuestion] = useState('');\n    const [options, setOptions] = useState([]);\n    const [ans, setAns] = useState([]);\n    const [score, setScore] = useState('');\n    const [totalQ, setTotalQ] = useState(0);\n\n    //admin creating this exercise\n    const [admin, setAdmin] = useState();\n    const [corpId, setCorpId] = useState();\n    const [jobId, setJobId] = useState('');\n\n    // List of all jobs returned from api\n    const [jobs, setJobs] = useState([]);\n\n\n    //get logged in Admin\n    useEffect(() => {\n        const admin = JSON.parse(sessionStorage.getItem(\"key\"));\n\n        admin.status == 'corporate' ? setCorpId(admin.id) : setAdmin(admin.id);\n        getAllJobs(admin.id);\n    }, []);\n\n\n    // question functions\n    const handleOptions = (e) => {\n\n        setOptions(e.target.value)\n    }\n    const handleAns = (e) => {\n        setAns(e.target.value)\n    }\n\n    const handleQuestion = (e) => {\n        setQuestion(e.target.value);\n    }\n    const handleScore = (e) => {\n        const value = e.target.value;\n\n        setScore(value);\n    }\n\n    const createQuestion = () => {\n\n\n            setSpinner(true);\n\n            const splitOptions = options.split(',');\n\n            const splitAns = ans.split(',');\n\n            const questionData = {\n                excercise_id: exId,\n                question: question,\n                options: splitOptions,\n                correct_ans: splitAns,\n                score: score\n            }\n\n            axios.post(`http://localhost:5000/question/add`, questionData)\n                .then(res => {\n                    console.log(res.data);\n                    setSpinner(false);\n                    setAns('');\n                    setQuestion('')\n                    setOptions('')\n                    setScore('')\n                    setExId(res.data.excercise_id);\n\n                    //get number of questions and display\n                    axios.post(`http://localhost:5000/question/${res.data.excercise_id}`)\n                        .then(res => setTotalQ(res.data.length))\n                        .catch(err => console.log(err))\n\n                })\n                .catch(err => console.log(err));\n\n            console.log(questionData);\n    }\n\n\n\n    //exercise functions\n    const handleExTitle = (e) => {\n        const value = e.target.value;\n\n        setExTitle(value);\n    }\n\n    const handleExDuration = (e) => {\n\n        const value = e.target.value;\n\n        setExDuration(value);\n    }\n\n\n    const createExercise = () => {\n\n        const exData = {\n            title: extitle,\n            duration: exduration,\n            service: service,\n            admin_id: admin ? admin : null,\n            corp_id: corpId ? corpId : null,\n            job_id: jobId\n        }\n\n        // if (extitle == \"\") {\n        //     return\n\n        // }\n        // if (exduration == \"\") {\n        //     return\n\n        // }\n        // if (jobId == \"\") {\n        //     alert('you need to choose a job')\n        //     return;\n\n        // } \n    \n        setSpinner(true);\n\n            axios.post(exUrl, exData)\n                .then(res => {\n                    setExId(res.data._id);\n                    setSpinner(false);\n                    setPage(2)\n                    refreshContentLog();\n                    console.log(res.data)\n                })\n                .catch(err => {\n                    alert('oops ' + err);\n                })\n\n        console.log(exData)\n\n    }\n\n    //page display logic\n    const setExForm = () => {\n        setPage(1)\n    }\n    const setQuesForm = () => {\n        setPage(2)\n    }\n\n    // onChange Job\n    const onChangeJob = (e) => {\n        const job_id = e.target.value;\n        setJobId(job_id);\n    }\n\n    return (\n        <>\n            <Card className=\"col col-lg-6 col-sm-6\" style={{ overflow: 'scroll' }}>\n                <CardContent>\n                    <h6 style={{ textAlign: 'center' }}>{title}</h6>\n                    <hr />\n\n                    {\n                        (page == 0) ?\n                            <>\n                                <div style={{ height: '100px' }}></div>\n                                <button\n                                    className=\"btn font-weight-bold mt-3 py-2 w-100 border-0\"\n                                    style={{ background: '#21A5E7', color: 'white' }}\n                                    onClick={setExForm}\n                                >\n                                    Create Exercise\n                            </button>\n                            </>\n                            : (page == 1) ?\n                                <>\n                                    {/* jobs dropdown */}\n                                    <div className=\"row mt-3\">\n                                        <div className=\"col\">\n                                            <label style={{ fontWeight: 'bold' }}>Select Job</label>\n                                            <select onChange={onChangeJob} className=\"form-control text-small\">\n                                                <option>Select Job this exercise is for</option>\n                                                {mapJobs()}\n                                            </select>\n                                        </div>\n                                    </div>\n                                    <div className=\"row mt-3\">\n                                        <div className=\"col\">\n                                            <label style={{ fontWeight: 'bold' }}>Exercise Title</label>\n                                            <input type=\"text\" name=\"title\" value={extitle} onChange={handleExTitle} placeholder=\"Exercise Title\" className=\"form-control\" required />\n                                        </div>\n                                    </div>\n\n                                    <div className=\"row mt-3\">\n                                        <div className=\"col\">\n                                            <label style={{ fontWeight: 'bold' }}>Exercise Duration</label>\n                                            <input type=\"number\" name=\"duration\" value={exduration} onChange={handleExDuration} placeholder=\"Time Allowed for this Exercise Eg 20\" className=\"form-control\" required />\n                                        </div>\n                                    </div>\n                                    <div className=\"row mt-3\">\n                                        <div className=\"col\">\n                                            <button\n                                                className=\"btn font-weight-light mt-3 w-100 border-0\"\n                                                style={{ background: '#21A5E7', color: 'white' }}\n                                                onClick={createExercise}\n                                            >\n                                                {spinner ? <Spinner as=\"span\" animation=\"grow\" size=\"sm\" role=\"status\" aria-hidden=\"true\" /> : \"Create New Exercise\"}\n                                            </button>\n                                        </div>\n                                    </div>\n                                </> :\n                                (page == 2)\n                                    ?\n                                    <>\n                                        <span style={{ fontWeight: 'bold' }}><u>Exercise: {extitle}</u></span><br />\n                                        <span style={{ fontWeight: 'bold' }}><u>Number of questions: {totalQ}</u></span>\n                                        <hr />\n                                        <div className=\"row mt-3\">\n                                            <div className=\"col\">\n                                                <label style={{ fontWeight: 'bold' }}>Question</label>\n                                                <input type=\"text\" name=\"title\" value={question} onChange={handleQuestion} placeholder=\"Question\" className=\"form-control\" required />\n                                            </div>\n                                        </div>\n\n                                        <div className=\"row mt-3\">\n                                            <div className=\"col\">\n                                                <label style={{ fontWeight: 'bold' }}>Options</label>\n                                                <textarea cols=\"5\" rows=\"3\" value={options} onChange={handleOptions} className=\"form-control\" placeholder=\"Eg rice,beans,garri\"></textarea>\n                                            </div>\n                                        </div>\n                                        <div className=\"row mt-3\">\n                                            <div className=\"col\">\n                                                <label style={{ fontWeight: 'bold' }}>Corrects Answer / Answers</label>\n                                                <textarea cols=\"5\" rows=\"3\" value={ans} className=\"form-control\" onChange={handleAns} placeholder=\"Eg rice,beans\"></textarea>\n                                            </div>\n                                        </div>\n\n                                        <div className=\"row mt-3\">\n                                            <div className=\"col\">\n                                                <label style={{ fontWeight: 'bold' }}>Score</label>\n                                                <input type=\"number\" value={score} onChange={handleScore} className=\"form-control\" placeholder=\"Eg 10\" />\n                                            </div>\n                                        </div>\n\n                                        <div className=\"row mt-3\">\n                                            <div className=\"col\">\n                                                <button\n                                                    className=\"btn font-weight-light mt-3 w-100 border-0\"\n                                                    style={{ background: '#21A5E7', color: 'white' }}\n                                                    onClick={createQuestion}\n                                                >\n                                                    {spinner ? <Spinner as=\"span\" animation=\"grow\" size=\"sm\" role=\"status\" aria-hidden=\"true\" /> : \"Create Question\"}\n                                                </button>\n                                            </div>\n                                        </div>\n                                    </>\n                                    : \"\"\n\n                    }\n\n                </CardContent>\n            </Card>\n\n        </>\n    );\n\n    // Get all jobs by corpid\n    function getAllJobs(corpid) {\n        try {\n            axios.get(`http://localhost:5000/jobs/${corpid}`)\n                .then(jobs => {\n                    // console.log(jobs.data[0].jobs);\n                    setJobs(jobs.data[0].jobs);\n                })\n                .catch(err => console.log('Error: ' + err));\n        } catch (error) {\n\n        }\n    }\n\n    // Map through all the jobs\n    function mapJobs() {\n        return jobs.map(item => (\n            <option value={item.job_id}>{item.title}</option>\n        ))\n    }\n\n\n}\n\nexport default NewExercises;"]},"metadata":{},"sourceType":"module"}