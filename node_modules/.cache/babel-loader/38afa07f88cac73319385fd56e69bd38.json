{"ast":null,"code":"import _toArray from \"/Users/mac/Desktop/projekte/esgrown/node_modules/@babel/runtime/helpers/esm/toArray\";\nimport _slicedToArray from \"/Users/mac/Desktop/projekte/esgrown/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mac/Desktop/projekte/esgrown/src/components/ind_dashboard_components/subscription-pages/rm/jobsmodal.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Modal, Form, Button } from 'react-bootstrap';\nimport axios from 'axios';\n\nconst JobsModal = props => {\n  const show = props.show,\n        onHide = props.onHide;\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        data = _useState2[0],\n        setData = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        disabled = _useState4[0],\n        setDisabled = _useState4[1];\n\n  const _useState5 = useState(),\n        _useState6 = _slicedToArray(_useState5, 2),\n        user = _useState6[0],\n        setUser = _useState6[1];\n\n  const _useState7 = useState([]),\n        _useState8 = _toArray(_useState7);\n\n  useEffect(() => {\n    //get user\n    const user = JSON.parse(sessionStorage.getItem('key'));\n    setUser(user); //make api call to get all jobs and set in state\n\n    axios.get(`http://localhost:5000/jobs`).then(res => {\n      if (res.data.length > 0) {\n        setData(res.data);\n      }\n\n      console.log(res.data);\n    }).catch(err => console.log(err)); //check to see if user has applied for max jobs allowed\n\n    axios.get(`http://localhost:5000/applications/check/${user.id}`).then(res => {\n      if (res.data.jobs_applied_for.length > 1) {\n        setDisabled(true);\n      }\n\n      console.log(res.data.jobs_applied_for);\n    }).catch(err => console.log(err));\n  }, []);\n\n  const _useState9 = useState(''),\n        _useState10 = _slicedToArray(_useState9, 2),\n        displayJobs = _useState10[0],\n        setDisplayJobs = _useState10[1];\n\n  const _useState11 = useState(''),\n        _useState12 = _slicedToArray(_useState11, 2),\n        desc = _useState12[0],\n        setDesc = _useState12[1];\n\n  const _useState13 = useState([]),\n        _useState14 = _slicedToArray(_useState13, 2),\n        companiesAppliedTo = _useState14[0],\n        setCompaniesAppliedTo = _useState14[1];\n\n  const _useState15 = useState([]),\n        _useState16 = _slicedToArray(_useState15, 2),\n        jobsAppliedfor = _useState16[0],\n        setJobsAppliedfor = _useState16[1]; // if (onHide) {\n  //     setCompaniesAppliedTo('');\n  //     setJobsAppliedfor('');\n  // }\n\n\n  const toggleJobs = e => {\n    setCompaniesAppliedTo(companiesAppliedTo.concat(e.target.value));\n    data.map(job => {\n      if (job.company_name == e.target.value) {\n        setDisplayJobs(job.jobs);\n      }\n    });\n  };\n\n  const postToServer = () => {\n    if (companiesAppliedTo.length < 1) {\n      alert(\"you need to apply to at least one company\");\n      return;\n    } else if (jobsAppliedfor.length > 2) {\n      alert(\"You can only apply to a max of two jobs\");\n      setJobsAppliedfor('');\n      return;\n    }\n\n    const postData = {\n      applicant_id: user.id,\n      applicant_name: user.name,\n      applicant_email: user.email,\n      companies_applied_to: companiesAppliedTo,\n      jobs_applied_for: jobsAppliedfor\n    };\n    console.log(postData); // axios.post(`http://localhost:5000/applications/add`, postData)\n    //     .then(res => {\n    //         if (res.data.length > 0) {\n    //             alert(\"Job applied for successfully\")\n    //         }\n    //     })\n    //     .catch(err => console.log(err));\n\n    setCompaniesAppliedTo('');\n    setJobsAppliedfor('');\n  };\n\n  const getDesc = e => {\n    setJobsAppliedfor(jobsAppliedfor.concat(e.target.value));\n    displayJobs.map(job => {\n      if (job.title == e.target.value) {\n        setDesc(job.description);\n      }\n    });\n  };\n\n  return React.createElement(Modal, {\n    show: show,\n    onHide: onHide,\n    centered: true,\n    style: {},\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, React.createElement(Modal.Body, {\n    style: {\n      background: '#fafafa',\n      height: '340px',\n      width: '550px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, React.createElement(\"h5\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, \"Get A Job\"), React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"mb-3\",\n    style: {},\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(Form.Control, {\n    as: \"select\",\n    onChange: toggleJobs,\n    disabled: disabled,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, \"where you would like to work\"), data.map(job => {\n    return React.createElement(\"option\", {\n      name: job.company_name,\n      value: job.company_name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, job.company_name);\n  }))), React.createElement(\"div\", {\n    className: \"mb-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, React.createElement(Form.Control, {\n    as: \"select\",\n    onChange: getDesc,\n    disabled: disabled,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, \"what would you like to work as\"), displayJobs ? displayJobs.map(job => {\n    return React.createElement(\"option\", {\n      value: job.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, job.title);\n  }) : \"\")), React.createElement(\"div\", {\n    className: \"mb-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, React.createElement(Form.Control, {\n    as: \"textarea\",\n    rows: \"4\",\n    value: desc ? desc : \"\",\n    disabled: disabled,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  })), React.createElement(Button, {\n    size: \"sm\",\n    style: {\n      background: '#21a5e7',\n      border: '#21a5e7'\n    },\n    block: true,\n    onClick: postToServer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, disabled ? \"You have applied for max Jobs already\" : \"Apply\"))), React.createElement(Modal.Footer, {\n    style: {\n      background: '#dbdee0',\n      width: '550px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, React.createElement(\"small\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, \"Note: you can only add a maximum of two jobs\")), React.createElement(Modal.Footer, {\n    style: {\n      background: '#dbdee0',\n      width: '550px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, jobsAppliedfor.length > 0 ? React.createElement(React.Fragment, null, \"Current Jobs: \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }), jobsAppliedfor.map(j => {\n    return React.createElement(React.Fragment, null, React.createElement(\"span\", {\n      style: {\n        textAlign: 'left'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, j));\n  })) : \"\"));\n};\n\nexport default JobsModal;","map":{"version":3,"sources":["/Users/mac/Desktop/projekte/esgrown/src/components/ind_dashboard_components/subscription-pages/rm/jobsmodal.js"],"names":["React","useState","useEffect","Modal","Form","Button","axios","JobsModal","props","show","onHide","data","setData","disabled","setDisabled","user","setUser","JSON","parse","sessionStorage","getItem","get","then","res","length","console","log","catch","err","id","jobs_applied_for","displayJobs","setDisplayJobs","desc","setDesc","companiesAppliedTo","setCompaniesAppliedTo","jobsAppliedfor","setJobsAppliedfor","toggleJobs","e","concat","target","value","map","job","company_name","jobs","postToServer","alert","postData","applicant_id","applicant_name","name","applicant_email","email","companies_applied_to","getDesc","title","description","background","height","width","border","j","textAlign"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Modal, Form, Button } from 'react-bootstrap';\nimport axios from 'axios';\n\n\nconst JobsModal = (props) => {\n\n    const { show, onHide } = props;\n\n    const [data, setData] = useState([]);\n    const [disabled, setDisabled] = useState(false)\n    const [user, setUser] = useState();\n    const [] = useState([]);\n\n    useEffect(() => {\n        //get user\n        const user = JSON.parse(sessionStorage.getItem('key'))\n        setUser(user)\n\n        //make api call to get all jobs and set in state\n        axios.get(`http://localhost:5000/jobs`)\n            .then(res => {\n                if (res.data.length > 0) {\n                    setData(res.data)\n                }\n                console.log(res.data)\n            })\n            .catch(err => console.log(err));\n\n\n        //check to see if user has applied for max jobs allowed\n        axios.get(`http://localhost:5000/applications/check/${user.id}`)\n            .then(res => {\n                if (res.data.jobs_applied_for.length > 1) {\n                    setDisabled(true)\n                }\n                console.log(res.data.jobs_applied_for);\n            })\n            .catch(err => console.log(err));\n    }, [])\n\n\n    const [displayJobs, setDisplayJobs] = useState('')\n    const [desc, setDesc] = useState('')\n\n    const [companiesAppliedTo, setCompaniesAppliedTo] = useState([])\n    const [jobsAppliedfor, setJobsAppliedfor] = useState([])\n\n\n    // if (onHide) {\n    //     setCompaniesAppliedTo('');\n    //     setJobsAppliedfor('');\n    // }\n\n\n    const toggleJobs = (e) => {\n\n        setCompaniesAppliedTo(companiesAppliedTo.concat(e.target.value));\n        data.map((job) => {\n            if (job.company_name == e.target.value) {\n                setDisplayJobs(job.jobs)\n\n            }\n        }\n\n        )\n\n    }\n\n\n\n    const postToServer = () => {\n\n        if (companiesAppliedTo.length < 1) {\n            alert(\"you need to apply to at least one company\")\n            return\n        } else if (jobsAppliedfor.length > 2) {\n            alert(\"You can only apply to a max of two jobs\")\n            setJobsAppliedfor('')\n            return\n        }\n\n        const postData = {\n            applicant_id: user.id,\n            applicant_name: user.name,\n            applicant_email: user.email,\n            companies_applied_to: companiesAppliedTo,\n            jobs_applied_for: jobsAppliedfor\n        }\n\n        console.log(postData)\n\n        // axios.post(`http://localhost:5000/applications/add`, postData)\n        //     .then(res => {\n        //         if (res.data.length > 0) {\n        //             alert(\"Job applied for successfully\")\n        //         }\n        //     })\n        //     .catch(err => console.log(err));\n\n        setCompaniesAppliedTo('')\n        setJobsAppliedfor('')\n    }\n\n\n\n    const getDesc = (e) => {\n\n\n        setJobsAppliedfor(jobsAppliedfor.concat(e.target.value))\n\n        displayJobs.map((job) => {\n            if (job.title == e.target.value) {\n                setDesc(job.description)\n            }\n        })\n    }\n\n\n    return (\n\n        <Modal show={show} onHide={onHide} centered style={{}}>\n\n            <Modal.Body style={{ background: '#fafafa', height: '340px', width: '550px' }}>\n                <h5>Get A Job</h5>\n                <div className=\"container\">\n                    <div className=\"mb-3\" style={{}}>\n                        <Form.Control as=\"select\" onChange={toggleJobs} disabled={disabled}>\n                            <option>where you would like to work</option>\n                            {data.map((job) => {\n                                return <option name={job.company_name} value={job.company_name}>{job.company_name}</option>\n                            })}\n\n                        </Form.Control>\n                    </div>\n                    <div className=\"mb-3\">\n                        <Form.Control as=\"select\" onChange={getDesc} disabled={disabled}>\n                            <option>what would you like to work as</option>\n                            {displayJobs ? displayJobs.map((job) => {\n                                return <option value={job.title}>{job.title}</option>\n                            }) : \"\"}\n                        </Form.Control>\n                    </div>\n\n\n                    <div className=\"mb-3\">\n                        <Form.Control as=\"textarea\" rows=\"4\"\n                            value={desc ? desc : \"\"}\n                            disabled={disabled}\n                        />\n                    </div>\n                    <Button size=\"sm\" style={{ background: '#21a5e7', border: '#21a5e7' }} block onClick={postToServer}>\n                        {disabled ? \"You have applied for max Jobs already\" : \"Apply\"}\n                    </Button>\n                </div>\n            </Modal.Body>\n            <Modal.Footer style={{ background: '#dbdee0', width: '550px' }}>\n                <small>Note: you can only add a maximum of two jobs</small>\n            </Modal.Footer>\n            <Modal.Footer style={{ background: '#dbdee0', width: '550px' }}>\n                {\n                    jobsAppliedfor.length > 0 ?\n                        <>\n                            Current Jobs: <br />\n                            {jobsAppliedfor.map(j => {\n                                return (\n                                    <>\n                                        <span style={{ textAlign: 'left' }}>{j}</span>\n                                    </>\n                                );\n                            })}\n                        </>\n                        : \"\"}\n            </Modal.Footer>\n        </Modal>\n    );\n}\nexport default JobsModal;\n"]},"metadata":{},"sourceType":"module"}