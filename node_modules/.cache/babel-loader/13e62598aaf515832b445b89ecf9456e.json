{"ast":null,"code":"import _slicedToArray from \"/Users/mac/Desktop/projekte/esgrown/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mac/Desktop/projekte/esgrown/src/components/ind_dashboard_components/subscription-pages/rm/jobsmodal.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Modal, Form, Button } from 'react-bootstrap';\nimport axios from 'axios';\nimport toast from '../../../../util/toast';\n\nconst JobsModal = ({\n  show,\n  onHide,\n  closeModal\n}) => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        data = _useState2[0],\n        setData = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        disabled = _useState4[0],\n        setDisabled = _useState4[1];\n\n  const _useState5 = useState(),\n        _useState6 = _slicedToArray(_useState5, 2),\n        user = _useState6[0],\n        setUser = _useState6[1];\n\n  const _useState7 = useState(''),\n        _useState8 = _slicedToArray(_useState7, 2),\n        jobID = _useState8[0],\n        setJobID = _useState8[1];\n\n  const _useState9 = useState(''),\n        _useState10 = _slicedToArray(_useState9, 2),\n        deadline = _useState10[0],\n        setDeadLine = _useState10[1];\n\n  const _useState11 = useState(false),\n        _useState12 = _slicedToArray(_useState11, 2),\n        loading = _useState12[0],\n        setLoading = _useState12[1];\n\n  useEffect(() => {\n    //get user\n    const user = JSON.parse(sessionStorage.getItem('key'));\n    setUser(user); //make api call to get all jobs and set in state\n\n    axios.get(`http://localhost:5000/jobs`).then(res => {\n      if (res.data.length > 0) {\n        setData(res.data);\n      }\n\n      console.log(res.data);\n    }).catch(err => console.log(err)); //check to see if user has applied for max jobs allowed\n\n    axios.get(`http://localhost:5000/applications/check/${user.id}`).then(res => {\n      if (res.data.jobs_applied_for.length > 1) {\n        setDisabled(true);\n      }\n\n      console.log(res.data.jobs_applied_for);\n    }).catch(err => console.log(err));\n  }, []);\n\n  const _useState13 = useState(''),\n        _useState14 = _slicedToArray(_useState13, 2),\n        displayJobs = _useState14[0],\n        setDisplayJobs = _useState14[1];\n\n  const _useState15 = useState(''),\n        _useState16 = _slicedToArray(_useState15, 2),\n        desc = _useState16[0],\n        setDesc = _useState16[1];\n\n  const _useState17 = useState(''),\n        _useState18 = _slicedToArray(_useState17, 2),\n        companiesAppliedTo = _useState18[0],\n        setCompaniesAppliedTo = _useState18[1];\n\n  const _useState19 = useState(''),\n        _useState20 = _slicedToArray(_useState19, 2),\n        jobTitle = _useState20[0],\n        setJobTitle = _useState20[1];\n\n  const toggleJobs = e => {\n    setCompaniesAppliedTo(e.target.value);\n    data.map(job => {\n      if (job.company_name == e.target.value) {\n        setDisplayJobs(job.jobs);\n      }\n    });\n  };\n\n  const postToServer = () => {\n    const postData = {\n      applicant_id: user.id,\n      applicant_name: user.name,\n      applicant_email: user.email,\n      jobs_applied_for: {\n        company: companiesAppliedTo,\n        job_title: jobTitle,\n        job_id: jobID,\n        deadline: deadline\n      }\n    };\n\n    try {\n      setLoading(true);\n      axios.post(`http://localhost:5000/applications/add`, postData).then(res => {\n        console.log(res.data.msg);\n        console.log(res.data);\n        setLoading(false);\n        toast(res.data.msg, 'info');\n        closeModal();\n      }).catch(err => {\n        setLoading(false);\n        console.log(err);\n      });\n    } catch (e) {}\n  };\n\n  const getDesc = e => {\n    // job.title / job.job_id / job.dead_line\n    const splitedValue = e.target.value.split('/');\n    const title = splitedValue[0];\n    const jobid = splitedValue[1];\n    const deadline = splitedValue[2];\n    setJobID(jobid);\n    setDeadLine(deadline);\n    setJobTitle(title);\n    displayJobs.map(job => {\n      if (job.title == title) {\n        setDesc(job.desc);\n      }\n    });\n  };\n\n  return React.createElement(Modal, {\n    show: show,\n    onHide: onHide,\n    centered: true,\n    style: {},\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, React.createElement(Modal.Body, {\n    style: {\n      background: '#fafafa',\n      height: '340px',\n      width: '550px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(\"h5\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, \"Get A Job\"), React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"mb-3\",\n    style: {},\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(Form.Control, {\n    as: \"select\",\n    onChange: toggleJobs,\n    disabled: disabled,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, \"where you would like to work\"), data.map(job => {\n    return React.createElement(\"option\", {\n      name: job.company_name,\n      value: job.company_name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, job.company_name);\n  }))), React.createElement(\"div\", {\n    className: \"mb-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, React.createElement(Form.Control, {\n    as: \"select\",\n    onChange: getDesc,\n    disabled: disabled,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, \"what would you like to work as\"), displayJobs ? displayJobs.map(job => {\n    return React.createElement(\"option\", {\n      value: `${job.title}/${job.job_id}/${job.dead_line}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, job.title);\n  }) : \"\")), React.createElement(\"div\", {\n    className: \"mb-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, React.createElement(Form.Control, {\n    as: \"textarea\",\n    rows: \"4\",\n    value: desc ? desc : \"\",\n    disabled: disabled,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  })), React.createElement(Button, {\n    size: \"sm\",\n    style: {\n      background: '#21a5e7',\n      border: '#21a5e7'\n    },\n    block: true,\n    onClick: postToServer,\n    disabled: loading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, \"Apply \", loading ? React.createElement(\"i\", {\n    className: \"fa fa-spinner fa-spin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }) : \"\"))), React.createElement(Modal.Footer, {\n    style: {\n      background: '#dbdee0',\n      width: '550px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, React.createElement(\"small\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, \"Note: you can only add a maximum of two jobs\")), React.createElement(Modal.Footer, {\n    style: {\n      background: '#dbdee0',\n      width: '550px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }));\n};\n\nexport default JobsModal;","map":{"version":3,"sources":["/Users/mac/Desktop/projekte/esgrown/src/components/ind_dashboard_components/subscription-pages/rm/jobsmodal.js"],"names":["React","useState","useEffect","Modal","Form","Button","axios","toast","JobsModal","show","onHide","closeModal","data","setData","disabled","setDisabled","user","setUser","jobID","setJobID","deadline","setDeadLine","loading","setLoading","JSON","parse","sessionStorage","getItem","get","then","res","length","console","log","catch","err","id","jobs_applied_for","displayJobs","setDisplayJobs","desc","setDesc","companiesAppliedTo","setCompaniesAppliedTo","jobTitle","setJobTitle","toggleJobs","e","target","value","map","job","company_name","jobs","postToServer","postData","applicant_id","applicant_name","name","applicant_email","email","company","job_title","job_id","post","msg","getDesc","splitedValue","split","title","jobid","background","height","width","dead_line","border"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Modal, Form, Button } from 'react-bootstrap';\nimport axios from 'axios';\nimport toast from '../../../../util/toast';\n\n\nconst JobsModal = ({ show, onHide, closeModal}) => {\n\n    const [data, setData] = useState([]);\n    const [disabled, setDisabled] = useState(false)\n    const [user, setUser] = useState();\n    const [jobID, setJobID] = useState('');\n    const [deadline, setDeadLine] = useState('');\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        //get user\n        const user = JSON.parse(sessionStorage.getItem('key'))\n        setUser(user)\n\n        //make api call to get all jobs and set in state\n        axios.get(`http://localhost:5000/jobs`)\n            .then(res => {\n                if (res.data.length > 0) {\n                    setData(res.data)\n                }\n                console.log(res.data)\n            })\n            .catch(err => console.log(err));\n\n\n        //check to see if user has applied for max jobs allowed\n        axios.get(`http://localhost:5000/applications/check/${user.id}`)\n            .then(res => {\n                if (res.data.jobs_applied_for.length > 1) {\n                    setDisabled(true)\n                }\n                console.log(res.data.jobs_applied_for);\n            })\n            .catch(err => console.log(err));\n    }, [])\n\n\n    const [displayJobs, setDisplayJobs] = useState('')\n    const [desc, setDesc] = useState('')\n\n    const [companiesAppliedTo, setCompaniesAppliedTo] = useState('')\n    const [jobTitle, setJobTitle] = useState('')\n\n\n    const toggleJobs = (e) => {\n\n        setCompaniesAppliedTo(e.target.value);\n\n        data.map((job) => {\n            if (job.company_name == e.target.value) {\n                setDisplayJobs(job.jobs)\n            }\n        }\n\n        )\n\n    }\n\n\n    const postToServer = () => {\n\n        const postData = {\n            applicant_id: user.id,\n            applicant_name: user.name,\n            applicant_email: user.email,\n            jobs_applied_for: {\n                company: companiesAppliedTo,\n                job_title: jobTitle,\n                job_id: jobID,\n                deadline: deadline\n            } ,\n            \n            \n        }\n\n        try {\n            setLoading(true)\n            axios.post(`http://localhost:5000/applications/add`, postData)\n                .then(res => {\n                    console.log(res.data.msg);\n                    console.log(res.data);\n                    setLoading(false);\n                    toast(res.data.msg, 'info')\n                    closeModal();\n\n                })\n                .catch(err => {\n                    setLoading(false)\n                    console.log(err)\n                });\n            \n        }catch(e){}\n\n        \n    }\n\n\n\n    const getDesc = (e) => {\n\n        // job.title / job.job_id / job.dead_line\n        const splitedValue = e.target.value.split('/');\n\n        const title = splitedValue[0];\n        const jobid = splitedValue[1];\n        const deadline = splitedValue[2];\n\n        setJobID(jobid);\n        setDeadLine(deadline);\n\n        setJobTitle(title);\n\n        displayJobs.map(job => {\n            if (job.title == title) {\n                setDesc(job.desc)\n            }\n        })\n    }\n\n\n    return (\n\n        <Modal show={show} onHide={onHide} centered style={{}}>\n\n            <Modal.Body style={{ background: '#fafafa', height: '340px', width: '550px' }}>\n                <h5>Get A Job</h5>\n                <div className=\"container\">\n                    <div className=\"mb-3\" style={{}}>\n                        <Form.Control as=\"select\" onChange={toggleJobs} disabled={disabled}>\n                            <option>where you would like to work</option>\n                            {data.map((job) => {\n                                return <option name={job.company_name} value={job.company_name}>{job.company_name}</option>\n                            })}\n\n                        </Form.Control>\n                    </div>\n                    <div className=\"mb-3\">\n                        <Form.Control as=\"select\" onChange={getDesc} disabled={disabled}>\n                            <option>what would you like to work as</option>\n                            {displayJobs ? displayJobs.map((job) => {\n                                return <option value={`${job.title}/${job.job_id}/${job.dead_line}`}>{job.title}</option>\n                            }) : \"\"}\n                        </Form.Control>\n                    </div>\n\n\n                    <div className=\"mb-3\">\n                        <Form.Control as=\"textarea\" rows=\"4\"\n                            value={desc ? desc : \"\"}\n                            disabled={disabled}\n                        />\n                    </div>\n                    <Button size=\"sm\" style={{ background: '#21a5e7', border: '#21a5e7' }} block onClick={postToServer} disabled={loading}>\n                        Apply {loading ? <i className=\"fa fa-spinner fa-spin\"></i> : \"\"}\n                    </Button>\n                </div>\n            </Modal.Body>\n            <Modal.Footer style={{ background: '#dbdee0', width: '550px' }}>\n                <small>Note: you can only add a maximum of two jobs</small>\n            </Modal.Footer>\n            <Modal.Footer style={{ background: '#dbdee0', width: '550px' }}>\n                {/* {\n                    jobTitle.length > 0 ?\n                        <>\n                            Current Jobs: <br />\n                            {jobTitle.map(j => {\n                                return (\n                                    <>\n                                        <span style={{ textAlign: 'left' }}>{j}</span>\n                                    </>\n                                );\n                            })}\n                        </>\n                        : \"\"} */}\n            </Modal.Footer>\n        </Modal>\n    );\n}\nexport default JobsModal;\n"]},"metadata":{},"sourceType":"module"}