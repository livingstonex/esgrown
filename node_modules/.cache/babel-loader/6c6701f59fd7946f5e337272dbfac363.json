{"ast":null,"code":"import _slicedToArray from \"/Users/mac/Desktop/projekte/esgrown/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mac/Desktop/projekte/esgrown/src/components/corp_dashboard_components/staff/excercise_rankings.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nexport default function ExcerciseRankings({\n  page\n}) {\n  useEffect(() => {\n    const user = JSON.parse(sessionStorage.getItem('key'));\n    getJobs(user.id);\n  }, []); // const [jobId, setJobId] = useState(\"\");\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        data = _useState2[0],\n        setData = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        jobs = _useState4[0],\n        setJobs = _useState4[1];\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        rank = _useState6[0],\n        setRank = _useState6[1];\n\n  let ranking = [];\n\n  const onChangeJob = e => {\n    // setJobId(e.target.value);\n    // Use the Job Id to make a call to get all answers\n    const job_id = e.target.value;\n    getAnswers(job_id);\n  };\n\n  console.log(rank);\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"d-flex justify-content-center mt-4 mb-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    style: {\n      marginTop: '70px',\n      fontFamily: 'quicksand'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"Rankings Page\")), React.createElement(\"div\", {\n    className: \"d-flex justify-content-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"select\", {\n    className: \"form-control text-small\",\n    onChange: onChangeJob,\n    style: {\n      width: '50%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"null\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"Select the jobs to view Rankings\"), mapAllJobs()))), React.createElement(\"div\", {\n    className: \"col\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"flex-column justify-content-center align-items-center mt-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, rankCard()))); // Get all jobs by company id\n\n  function getJobs(id) {\n    try {\n      axios.get(`http://localhost:5000/jobs/${id}`).then(res => {\n        if (res.data.length !== 0) {\n          setJobs(res.data[0].jobs);\n          console.log(res.data[0].jobs);\n        } else {\n          console.log(\"no data\");\n        }\n      }).catch(err => console.log(err));\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  function rankCard() {\n    return rank.map(item => React.createElement(\"div\", {\n      style: {\n        height: '50px',\n        width: '60%',\n        background: 'silver'\n      },\n      className: \"d-flex justify-content-around align-items-center mb-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, item.name), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \" \", item.percentage, \"% \", React.createElement(\"div\", {\n      className: \"btn btn-info btn-sm ml-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"Induct\"))));\n  } // Get all answers by job_id\n\n\n  function getAnswers(jobId) {\n    try {\n      axios.get(`http://localhost:5000/answer/job/${jobId}`).then(res => {\n        console.log(res.data);\n\n        if (res.data.length > 0) {\n          res.data.map(item => {\n            //  Calculate percentage\n            const percentage = item.total_scored / item.max_score * 100; //  Define object to hold individuls percentage and name\n\n            const obj = {\n              name: item.name,\n              percentage: Math.floor(percentage)\n            }; //  setRank(rank.concat(obj))\n\n            ranking.push(obj);\n          });\n          setRank(ranking);\n        } // setData(res.data);\n\n      }).catch(err => {\n        console.log(err);\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  } // Get all jobs by corp_id\n  // function getJobs(corpid) {\n  //     try {\n  //         axios.get(`http://localhost:5000/jobs/${corpid}`)\n  //             .then(res => {\n  //                 // console.log(res.data[0]);\n  //                 setJobs(res.data[0].jobs);\n  //             })\n  //             .catch(err => {\n  //                 console.log(err);\n  //             });\n  //     } catch (error) {\n  //     }\n  // }\n  // map jobs function\n\n\n  function mapAllJobs() {\n    return jobs.map(item => React.createElement(\"option\", {\n      value: item.job_id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, item.title));\n  } // Get all excercises that carry the Job id\n  // function getAnswersByJob(corpid, jobid){\n  //     try {\n  //         setSpinner(true);\n  //         axios.get(`http://localhost:5000/answer/${corpid}/${jobid}`)\n  //                 .then(answers => { \n  //                     setSpinner(false);\n  //                     setAnswers(answers.data);\n  //                 })\n  //                 .catch(err => console.log(err));\n  //     } catch (error) {\n  //     }\n  // }\n\n}","map":{"version":3,"sources":["/Users/mac/Desktop/projekte/esgrown/src/components/corp_dashboard_components/staff/excercise_rankings.js"],"names":["React","useState","useEffect","axios","ExcerciseRankings","page","user","JSON","parse","sessionStorage","getItem","getJobs","id","data","setData","jobs","setJobs","rank","setRank","ranking","onChangeJob","e","job_id","target","value","getAnswers","console","log","marginTop","fontFamily","width","mapAllJobs","rankCard","get","then","res","length","catch","err","error","map","item","height","background","name","percentage","jobId","total_scored","max_score","obj","Math","floor","push","title"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nexport default function ExcerciseRankings({ page }) {\n    useEffect(() => {\n        const user = JSON.parse(sessionStorage.getItem('key'));\n        getJobs(user.id);\n\n    }, []);\n    // const [jobId, setJobId] = useState(\"\");\n    const [data, setData] = useState([]);\n    const [jobs, setJobs] = useState([]);\n    const [rank, setRank] = useState([]);\n\n    let ranking = []\n\n    const onChangeJob = (e) => {\n        // setJobId(e.target.value);\n        // Use the Job Id to make a call to get all answers\n        const job_id = e.target.value;\n        getAnswers(job_id);\n    }\n    console.log(rank);\n    return (\n        <React.Fragment >\n            <div className=\"container\">\n                <div className=\"d-flex justify-content-center mt-4 mb-4\">\n                    <h2 style={{ marginTop: '70px', fontFamily: 'quicksand' }}>Rankings Page</h2>\n                </div>\n\n                <div className=\"d-flex justify-content-center\">\n                    <select className=\"form-control text-small\" onChange={onChangeJob} style={{ width: '50%' }}>\n                        <option value=\"null\">Select the jobs to view Rankings</option>\n                        {mapAllJobs()}\n                    </select>\n                </div>\n            </div>\n            <div className=\"col\">\n                <div className=\"flex-column justify-content-center align-items-center mt-4\">\n                    {/* Render Ranks here */}\n                    {rankCard()}\n                </div>\n            </div>\n        </React.Fragment>\n    );\n\n    // Get all jobs by company id\n    function getJobs(id){\n        try {\n            axios.get(`http://localhost:5000/jobs/${id}`)\n                .then(res => {\n                    if (res.data.length !== 0) {\n                        setJobs(res.data[0].jobs);\n                        console.log(res.data[0].jobs)\n                    } else {\n                        console.log(\"no data\")\n                    }\n                })\n                .catch(err => console.log(err));\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    function rankCard() {\n        return rank.map(item => (\n            <div style={{ height: '50px', width: '60%', background: 'silver', }} className=\"d-flex justify-content-around align-items-center mb-3\">\n                <div>{item.name}</div>\n                <div> {item.percentage}% <div className=\"btn btn-info btn-sm ml-3\">Induct</div></div>\n            </div>\n        ));\n    }\n\n    // Get all answers by job_id\n    function getAnswers(jobId) {\n\n        try {\n            axios.get(`http://localhost:5000/answer/job/${jobId}`)\n                .then(res => {\n                    console.log(res.data);\n\n                    if (res.data.length > 0) {\n\n                        res.data.map(item => {\n                            //  Calculate percentage\n                            const percentage = (item.total_scored / item.max_score) * 100;\n\n                            //  Define object to hold individuls percentage and name\n                            const obj = {\n                                name: item.name,\n                                percentage: Math.floor(percentage),\n                            };\n                            //  setRank(rank.concat(obj))\n                            ranking.push(obj);\n                        });\n\n                        setRank(ranking)\n\n                    }\n                    // setData(res.data);\n\n                })\n                .catch(err => {\n                    console.log(err);\n                })\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n\n    // Get all jobs by corp_id\n    // function getJobs(corpid) {\n    //     try {\n    //         axios.get(`http://localhost:5000/jobs/${corpid}`)\n    //             .then(res => {\n    //                 // console.log(res.data[0]);\n    //                 setJobs(res.data[0].jobs);\n    //             })\n    //             .catch(err => {\n    //                 console.log(err);\n    //             });\n    //     } catch (error) {\n\n    //     }\n    // }\n\n    // map jobs function\n    function mapAllJobs() {\n        return jobs.map(item => (\n            <option value={item.job_id}>{item.title}</option>\n        ))\n    }\n\n\n\n    // Get all excercises that carry the Job id\n    // function getAnswersByJob(corpid, jobid){\n    //     try {\n    //         setSpinner(true);\n    //         axios.get(`http://localhost:5000/answer/${corpid}/${jobid}`)\n    //                 .then(answers => { \n    //                     setSpinner(false);\n    //                     setAnswers(answers.data);\n    //                 })\n    //                 .catch(err => console.log(err));\n    //     } catch (error) {\n            \n    //     }\n    // }\n\n\n}"]},"metadata":{},"sourceType":"module"}